import { Constr, Data, paymentCredentialOf, fromText } from 'lucid-cardano';

var Lock;
(function (Lock) {
    Lock[Lock["Locked"] = 0] = "Locked";
    Lock[Lock["Partial"] = 1] = "Partial";
    Lock[Lock["Blocked"] = 2] = "Blocked";
    Lock[Lock["Error"] = 3] = "Error";
})(Lock || (Lock = {}));

function encodeAddress(paymentPubKeyHex, stakingPubKeyHex) {
    const paymentCredential = new Constr(0, [paymentPubKeyHex]);
    const stakingCredential = stakingPubKeyHex
        ? new Constr(0, [new Constr(0, [new Constr(0, [stakingPubKeyHex])])])
        : new Constr(1, []);
    return new Constr(0, [paymentCredential, stakingCredential]);
}
function encodeTreasuryDatumAddress(paymentPubKeyHex, stakingPubKeyHex) {
    const address = encodeAddress(paymentPubKeyHex, stakingPubKeyHex);
    return new Constr(0, [address]);
}
const encodeTreasuryDatumTokens = (currencySymbol, minTokens) => {
    return new Constr(1, [new Constr(0, [currencySymbol, minTokens])]);
};
function encodeRoyalty(portion) {
    return portion
        ? new Constr(0, [new Constr(0, [BigInt(portion.percent * 10000), Data.from(portion.treasury)])])
        : new Constr(1, []);
}
function encodeWantedAsset(wantedAsset) {
    return wantedAsset.assetName ?
        new Constr(0, [new Constr(0, [wantedAsset.policyId, wantedAsset.assetName])]) :
        new Constr(1, [wantedAsset.policyId]);
}

var ContractType;
(function (ContractType) {
    ContractType[ContractType["Unknown"] = 0] = "Unknown";
    ContractType[ContractType["JobTreasury"] = 1] = "JobTreasury";
    ContractType[ContractType["JobInstantBuy"] = 2] = "JobInstantBuy";
    ContractType[ContractType["JobOffer"] = 3] = "JobOffer";
    ContractType[ContractType["JobStake"] = 4] = "JobStake";
    ContractType[ContractType["JobLock"] = 5] = "JobLock";
    ContractType[ContractType["JPG"] = 6] = "JPG";
})(ContractType || (ContractType = {}));
class ContractBase {
    type;
    active;
    hash;
    treasury;
    ref;
    script;
    utxo;
    constructor(type, active, hash, ref, script, tresury) {
        this.type = type;
        this.active = active;
        this.ref = ref;
        this.hash = hash;
        this.utxo = undefined;
        this.script = script;
        this.treasury = tresury;
    }
    async getUtxo(lucid) {
        if (this.utxo)
            return this.utxo;
        if (this.ref) {
            const [utxo] = await lucid.utxosByOutRef([this.ref]);
            this.utxo = utxo;
            return utxo;
        }
    }
    async collectTx(lucid, tx, utxo, redeemer) {
        tx = tx.collectFrom([utxo], redeemer);
        tx = await this.attachTx(lucid, tx);
        return tx;
    }
    async attachTx(lucid, tx) {
        const utxo = await this.getUtxo(lucid);
        if (utxo) {
            return tx.readFrom([utxo]);
        }
        else if (this.script) {
            // Does not care about kind of validator
            return tx.attachSpendingValidator({
                type: 'PlutusV2',
                script: this.script
            });
        }
        throw new Error("There is no script");
    }
    parseDatum(lucid, datum) {
        throw new Error("No script provided");
    }
}
class Context {
    jobTokenPolicy;
    jobTokenName;
    numberOfToken;
    minimumAdaAmount = 2000000n;
    minimumJobFee = 100000n;
    minimumFee = 20000n;
    contracts;
    stakes;
    constructor(jobTokenPolicy, jobTokenName, numberOfToken, contracts, stakes) {
        this.jobTokenPolicy = jobTokenPolicy;
        this.jobTokenName = jobTokenName;
        this.numberOfToken = numberOfToken;
        this.contracts = contracts;
        this.stakes = stakes;
    }
    getContractByHash(hash) {
        const contract = this.contracts.find(contract => (hash == contract.hash));
        if (contract) {
            return contract;
        }
        throw new Error("No contract found");
    }
    getContractByAddress(address) {
        const paymentCred = paymentCredentialOf(address);
        if (paymentCred) {
            return this.getContractByHash(paymentCred.hash);
        }
        throw new Error("No contract found");
    }
    getContract(type) {
        return this.contracts.find(contract => (contract.active && contract.type == type));
    }
    getStakeNumber() {
        return this.stakes.length;
    }
    getStake(stakeId) {
        if (typeof stakeId === "undefined")
            stakeId = stakeId || Math.round(Math.random() * this.stakes.length);
        return this.stakes[stakeId % this.stakes.length];
    }
    getContractAddress(lucid, contract, stakeId) {
        const paymentCredential = {
            type: "Script",
            hash: contract.hash
        };
        const stakeCredential = {
            type: "Script",
            hash: this.getStake(stakeId)
        };
        return lucid.utils.credentialToAddress(paymentCredential, stakeCredential);
    }
}
function parseRoyalty(datum) {
    if (datum.index == 0) {
        return {
            percent: Number(datum.fields[0].fields[0]) / 10000,
            treasury: Data.to(datum.fields[0].fields[1])
        };
    }
    else {
        return undefined;
    }
}
function parseWantedAsset(datum) {
    if (datum.index == 0) {
        return {
            policyId: datum.fields[0].fields[0],
            assetName: datum.fields[0].fields[1]
        };
    }
    else {
        return {
            policyId: datum.fields[0],
            assetName: undefined
        };
    }
}
function parseBeneficier(lucid, datum) {
    const beneficier_address = datum.fields[0].fields[0];
    const beneficier_stake = datum.fields[1].index == 0 ?
        datum.fields[1].fields[0].fields[0].fields[0]
        :
            undefined;
    const beneficier = lucid.utils.credentialToAddress(lucid.utils.keyHashToCredential(beneficier_address), beneficier_stake ? lucid.utils.keyHashToCredential(beneficier_stake) : undefined);
    return beneficier;
}
class JobContract extends ContractBase {
}
class JobContractInstantBuy extends JobContract {
    parseDatum(lucid, datumString) {
        const datumParsed = Data.from(datumString);
        const beneficier = parseBeneficier(lucid, datumParsed.fields[0]);
        const listingMarketDatum = Data.to(datumParsed.fields[1]);
        const listingAffiliateDatum = datumParsed.fields[2].index == 0 ? Data.to(datumParsed.fields[2].fields[0]) : listingMarketDatum;
        const amount = datumParsed.fields[3];
        const royalty = parseRoyalty(datumParsed.fields[4]);
        return {
            beneficier,
            listingMarketDatum,
            listingAffiliateDatum,
            amount,
            royalty
        };
    }
}
class JobContractOffer extends JobContract {
    parseDatum(lucid, datumString) {
        const datum = Data.from(datumString);
        const beneficier = parseBeneficier(lucid, datum.fields[0]);
        const listingMarketDatum = Data.to(datum.fields[1]).toLowerCase();
        const listingAffiliateDatum = (datum.fields[2].index == 0 ? Data.to(datum.fields[2].fields[0]) : listingMarketDatum).toLowerCase();
        const amount = datum.fields[3];
        const wantedAsset = parseWantedAsset(datum.fields[4]);
        const royalty = parseRoyalty(datum.fields[5]);
        return {
            beneficier,
            listingMarketDatum,
            listingAffiliateDatum,
            amount,
            wantedAsset,
            royalty
        };
    }
}

function getContextPreview() {
    throw new Error("Un implemented");
}
function getContextPreprod() {
    const treasury = new JobContract(ContractType.JobTreasury, true, 'f7f2958d98792704d6cfce73c446f9b0a6f3c1b8db78c57a0c7aa202', {
        txHash: '9f23b7d827870c38d736e5016c9f4d85de7a8470a3614b7a1a492f00fa757a56',
        outputIndex: 0
    }, '590e290100003232323232323232323232322223232533300a3232323232533300f3370e9000002099191929998092999809299980919b87375a602800490010a511533013490117696e707574732e317374203d3d2031203f2046616c73650014a02a66602466e1cdd6980a000a4004294454cc04d241186f7574707574732e317374203d3d2031203f2046616c73650014a0294054ccc048cdc424181700466e04dd6980a8009bad301500214a22a660269201436f7574707574732e326e64202d20696e707574732e326e64203e20636f6e7374616e742e6d696e696d616c5f74726561737572795f726577617264203f2046616c73650014a02940ccc888ccc01400d2f7b630010100000101000022533301653330163375e6602460280049000002099baf33012301400248010cdd2a40086603600697ae014a0264a66602ea66602e66e20005208092f40114a2266602e66ebcdd318049bab33013301500348009300101a0004a094454cc061241375468657265206973206e6f206d696e696d616c20414441206f6e204f7574707574206f7220736f6d65207573656c65737320617373657400161337606ea0cdc01bad301900248008dd419b80375a603400400260126eaccc048c0500092002100137586601a601e6601a601e01490002400800e01866644466600800697bdb18010100000101000022533301553330153375e6602260266602260266602260260049001240009000002099baf3301130133301130130024800920043374a90021980d001a5eb80528099bb0375066e00dd6980b800a40046ea0cdc01bad30180013008375666022602666022602600490012400420026eb0cc030c038cc030c038025200048000cc030c038019200000b22232330010010042253330180011004132323300500233004004001301c002301a0011323232533301253330123253330133370e900000089919191919299980c19b87480000044c8c8cc88c8cc00400400c894ccc08800452809919299981019b8f00200514a2266008008002604c0046eb8c090004dd61980b180c1980b180c009a400090080009bae301f001301600214a0602c002603800260260026034002602201c26464664466e24004ccc020dd619809980a99809980a808240009000240004466e00004cc88c8c8cc004004008894ccc0880045200013232323232337000040026600c00c0066eb4c09000cdd71811001181300118120009919299980e99b874800800452f5bded8c02646eacc090004c06c008c06c004cc03c008004dd59980a980b9980a980b8012400490010021bae33011301300148000dd6998089809800a40046034002602201c602201a294454cc04d2413d6d6574686f642e636865636b5f7472616e73616374696f6e5f69735f76616c69646174656428636f6e746578742c20646174756d29203f2046616c73650014a02a666024a666024a66602466e25200200114a22a66026921356f757470757473203e3d20636f6e7374616e742e6d696e696d616c5f6e756d6265725f74726561737572696573203f2046616c73650014a0294454ccc048cdc38008010a511533013491196f757470757473203d3d20696e70757473203f2046616c73650014a0294454cc04d24150286f757470757473203e3d20636f6e7374616e742e6d696e696d616c5f6e756d6265725f74726561737572696573293f207c7c20286f757470757473203d3d20696e70757473293f203f2046616c73650014a02940ccc888ccc01400d200022533301653330163375e6602460280049000002099baf33012301400248010cdd2a40086603600697ae014a02a66602ca66602c66e20c024dd599809180a001240049040497a008a5113330163375e6e98c020dd599809180a00124004980101a0004a094454cc05d241375468657265206973206e6f206d696e696d616c20414441206f6e204f7574707574206f7220736f6d65207573656c6573732061737365740016133700002900108009bac3300d300f3300d300f00a48001200400700c33322233300400348000894ccc0554ccc054cdd7998089809998089809801240049000002099baf3301130133301130130024800920043374a90021980d001a5eb80528099b80001480084004dd6198061807198061807004a40009000003005911191980080080211299980c0008802099191980280119802002000980e001180d0009191980080080111299980a8008a5eb7bdb1804c8c8c8c94ccc054cdc7a4500002100313301a337606ea4008dd3000998030030019bab3017003375c602a0046032004602e0024646464a66602266e1d20020011480004c8dd6980c0009807801180780099299980819b87480080045300103d87a800013232323300100100222533301800114c103d87a800013232323253330183371e9110000213374a90001980e9ba80014bd700998030030019bad301a003375c6030004603800460340026eacc05c004c038008c038004cc0080052210022323300100100322533301400114c0103d87a800013232323253330143371e00e004266e95200033019374c00297ae01330060060033756602c0066eb8c050008c060008c058004c028014c94ccc02ccdc3a400460140022646464a66601c66e1d2000300d001132323300c300e3300c300e0014800920003015001300c001153300f49012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163322323300100100322533301500114c0103d87a80001323253330133375e6601e60220049000002899ba548000cc0600092f5c02660080080026032004602e0026eb0cc024c02ccc024c02c019200048000004c048004c02400454cc03124012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e0016330063008003480085261632533300a3370e90000008a99980718040020a4c2a660169211d4578706563746564206e6f206669656c647320666f7220436f6e73747200161533300a3370e90010008a99980718040020a4c2a6601692011d4578706563746564206e6f206669656c647320666f7220436f6e7374720016153300b4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163008003332232533300b3370e9000000899192999808980a00109924c64a66601c66e1d20000011323232325333016301900213232498c94ccc050cdc3a400000226464a666034603a0042649319299980b99b87480000044c8c94ccc074c0800084c9263011001153301a4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301e0013015002153330173370e90010008991919191919299981098120010a4c2a6603c9201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a604400260440046eb4c080004c080008dd6980f000980a8010a9980c24812b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301500115330174901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301b0013012003153330143370e90010008a99980c18090018a4c2a6602a92011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330154912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163012002300a0031533013491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301700130170023015001300c002153300f4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300c001153300e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301200130090021533300b3370e9001000899192999808980a00109924c64a66601c66e1d200000113232323253330163019002149854cc04d2401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a602e002602e0046eb8c054004c03000854cc03d2412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300c001153300e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630120013009002153300c4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163009001232533300a3370e900000089919299980818098010a4c2a6601a921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602200260100042a66601466e1d20020011323253330103013002149854cc0352401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602200260100042a660169212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300800100333001001480008888cccc01ccdc38008018069199980280299b8000448008c03c0040080088c018dd5000918021baa0015734ae7155ceaab9e5573eae815d0aba201');
    return new Context("74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a", "556e69717565", 1, [
        // Trading
        new JobContractOffer(ContractType.JobOffer, true, 'ac12c9aadf9d65e96332cb35d3876b98fae94dffe90ff5c45df650ed', {
            txHash: '9f23b7d827870c38d736e5016c9f4d85de7a8470a3614b7a1a492f00fa757a56',
            outputIndex: 2
        }, '5918b3010000333323232323232323232323232232232222232323232325333012323253330143370e9001000899191919299980c19b8748000c05c0044c8c8c8c8c8c94ccc078cdc3a400400226464a66604066e1d2000001132323322323300100100322533302a00114a026464a66605066e3c00801452889980200200098170011bae302c00137586603c60406603c604002c9000240200026eb8c09c004c078008528180f0009980d180e1980d180e00a2400090000991919191919192999812991919192999814a999814a999814a999814a99981499b89337006eb4cc094c09c07d2006482024bd004c008dd5998129813806a4004294454cc0a924015676616c75652e6c6f76656c6163655f6f6628696e7075742e76616c756529203e3d20646174756d2e6f6666657265645f7072696365202b20636f6e7374616e742e6d696e5f6164615f76616c7565203f2046616c73650014a02a66605266e212080897a375a6604a604e03e90030a51153302a49013d646174756d2e6f6666657265645f7072696365203e20636f6e7374616e742e6d696e696d616c5f636f6e74726163745f7072696365203f2046616c73650014a029404ccc8c0040048894ccc0c00085288992999818800899299981719b89337000066eb4cc0a8c0b000520004828270045288a99817a493273756d202b20782e706f7274696f6e203c3d20636f6e7374616e742e66697865645f646563696d616c73203f2046616c73650014a060660062646466600c00c00266e00010dd699815981680124000606a0086066006606600401490000a50153330293333322222323300100100522533303400114a226464a66606466e24dd6981a80119b8133332222323253330383370e90000008991919299981da99981d99baf374c64646600200200444a666084002297adef6c6013232323253330423371e911000021003133047337606ea4008dd3000998030030019bab3044003375c6084004608c00460880026eaccc0dcc0e400920024c0101a0001337129040497a008008a501001153303c4901375468657265206973206e6f206d696e696d616c20414441206f6e204f7574707574206f7220736f6d65207573656c6573732061737365740016301337566606c60700029001181f800981b0010a4000606c002660400084a66606e66601c66066606a0029000002001899baf33033303500148010cdd2a40086607800497ae014a06eb0cc0b8c0c001d2004006005303400233332222323253330383370e90000008991918099bab330363038330363038001480092002303f0013036002148000c0d8004cc08001094ccc0dcccc038cc0ccc0d4cc0ccc0d400520024800001000c4cdd799819981a99819981a800a4004900219ba548010cc0f00092f5c02940dd6198171818003a400000c00a60680042660080080022940c0e0008c0d80048894ccc0b0cdd7998141815001a400066e95200233031375200497ae013300400123375e660526056008900119ba548000cc0c80052f5c02940014cc094c09c075200002302114a22a6605492016b6d6574686f642e636865636b5f616c6c5f70726f766973696f6e732870726f766973696f6e732c20636f6e746578742e7472616e73616374696f6e2c2074726561737572795f7363726970745f686173682c207374616b655f61646472657373657329203f2046616c73650014a0294054ccc0a4cccc8888cc01401094ccc0b8cdd7998151816000a4000008264a66605e66e1d2000001132323232323253330353371290011998079bab3303130330084800800c0044cdc480498071bab330313033008480085281bae303a001303a002375c6070002605e002606c002605a00826464a66606266606264a66606c002294452819911919299981a99b874800800452f5bded8c02646eacc0f0004c0cc008c0cc004cc038008004dd59981698178022400400294128899b89005300a37566605a605e00890010a50375c606c002605a008605a0062940dd619812981399812981380ea4000900219812981380fa40006604a604e03e90042410125e802294454cc0a9241856d6574686f642e636865636b5f72657175697265645f7061796d656e7428636f6e746578742e7472616e73616374696f6e2e6f7574707574732c20646174756d2e6f6666657265725f616464726573732c20646174756d2e77616e7465645f61737365742c20636f6e7374616e742e6d696e5f6164615f76616c756529203f2046616c73650014a0294088c8cc00400400c894ccc0c000452809919299981718028010a5113300400400130340023032001233300200148900488100222323232533302c3370e90010008a40002646eb4c0cc004c0a8008c0a8004c94ccc0accdc3a40040022980103d87a800013232323300100100222533303300114c103d87a800013232323253330333371e016004266e95200033038375000297ae0133006006003375a606a0066eb8c0cc008c0dc008c0d4004dd5981900098148011814800998020018011119198008008019129998168008a6103d87a8000132323232533302d3371e00e004266e95200033032374c00297ae01330060060033756605e0066eb8c0b4008c0c4008c0bc0044ccc888c8cc004004010894ccc0b8004528899192999816299981619baf33028302a00248000014528899baf33028302a33028302a33028302a002480092000480000184cc0100100044c94ccc0b4cdc3a400060580022646600c00c00660560022a6605c9212a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633028302a33028302a33028302a00248009200048000c0c8008c0c0004dd619810981199810981180ca4000900019ba548008cc0a8dd480fa5eb800405281bab302600133332222323232337606e98008dd40009bad302c0023756605400264a66605066e1d20000011323232533302b533302b337109000000899b893370000200e01029404c8c94ccc0b4cdc3a4000002264646464a66606266ebc004cc0b4c0bc03120001337606e9803cdd419b8100e00d1337606e98ccc04003ccc0b4c0bc0212002007375066e04cdc0807003806981b0009816800981a0009815801099bb0374c66601801666052605600890010019ba83370266e0402800c024c0ac004cc09cc0a40092002153302c4912b526f79616c7469657320657863656564206d6178696d756d20616c6c6f7765642070657263656e7461676500163370666e0801cdd6998131814000a400090504e0098178009813001099bb0374c00c6ea0cdc080280218130009bad3301f30210194801800ccc07cc08406520003301f302101948028c8c8c8c8ccc00400400801c8894ccc0b000440084c8c8ccc014014ccc024010cc098c0a000920023370666e08028cdc199b824824138dd69981318140012400090504e00a414138020026060004605c002664464a66604e66e1d200000113232333008006001004302e00130250031004302500233020302201a48010cdc199b82004482807d20a09c013330020013301f302101948008cdc199b82003482807d20a09c013330014bd6f7b63000c9991299981219b88001002100210013370666e0800920d00f48282700520c09a0c22232330010010042253330263371090000018a99981500089981599bb0004375000697adef6c601323253330283375e605400400c26605a66ec0018dd419b80375a605600400a00226605a00466008008002605c00460580022a6604e92012350726f766973696f6e206d7573742062652067726561746572207468656e207a65726f00163370666e08dd69980e180f00b2400c907a01a414138026eb0c094004c07004cc070048c088004c088004c060004c07c004c05800454cc06524012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633223300300223375e6602c603000290000011bac33013301533013301500b48001200000222323300100100322533301e00114c0103d87a800013232533301c300500213374a90001981080125eb804cc010010004c088008c080004c06c004c0480085281809000998071808003240042930b19299980919b87480000044c8c94ccc060c06c0084c926323300100100222533301a00114984c8cc00c00cc078008c8c94ccc060cdc3a4000002264646464a66604060460042649318068008a9980ea49334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630210013021002375a603e002602c0042a660329212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163016001301c0011533015491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001637586032002602000e2a66602466e1d2002001153330163010007149854cc04d24011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330134912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e74001630100063253330113370e90000008991919191919191919191919299981098120010991919191924c64a66604466e1d2000001132325333028302b002132498c94ccc094cdc3a4000002264646464a66605a606000426493180d0008a998152481334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016302e001302e002375a605800260460042a6604c9212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016302300115330254901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630290013020006153330223370e90010008a99981318100030a4c2a6604692011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330234912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e74001630200053253330213370e9000000899192999813981500109924c64a66604866e1d2000001132323232533302c302f002149854cc0a52401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c605a002605a0046eb8c0ac004c08800854cc0952412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016302200115330244901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163028001301f007153330213370e900100089919299981398150010a4c2a660489201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c6050002603e00e2a660449212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301f0063253330203370e9000000899192999813181480109924c60260022a66046921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163027001301e00a153330203370e90010008a999812180f0050a4c2a6604292011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330214912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301e009300f00a300f00b153301e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163022001302200230200013020002375a603c002603c00460380026038004603400260340046030002601e00e2a660249212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300f00623253330113370e900000089919299980b980d00109924c600a0022a660289201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163018001300f002153330113370e900100089919299980b980d00109924c64a66602866e1d2000001132323232533301c301f002149854cc0652401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a603a002603a0046eb8c06c004c04800854cc0552412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301200115330144901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163018001300f00215330124912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300f00123253330103370e9000000899191919299980c180d8010991924c64a66602c66e1d200000113232533301c301f002132498c94ccc064cdc3a400000226464a66603e60440042649318070008a9980e249334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630200013017002153330193370e90010008991919191919299981198130010a4c2a660409201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a604800260480046eb4c088004c088008dd69810000980b8010a9980d24812b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301700115330194901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301d0013014003153330163370e90010008a99980d180a0018a4c2a6602e92011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330174912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301400230070031533015491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301900130190023017001300e00215330114912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300e001232533300f3370e900000089919299980a980c0010a4c2a66024921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602c002601a0042a66601e66e1d20020011323253330153018002149854cc0492401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602c002601a0042a660209212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300d00137580026eb8004cc0040052000222233330073370e00200601a4666600a00a66e000112002300f001002002230063754002460086ea80055cd2b9c5573aaae7955cfaba05742ae893011e581cf7f2958d98792704d6cfce73c446f9b0a6f3c1b8db78c57a0c7aa202004c01ff9fd8799fd87a9f581c75f706c9cfb759c05c77e7db13a45c6706a0caabee576e3ca11a49bdffffd8799fd87a9f581cd75e5d7b05677da8fcf1559604b78f1a04a4efe66824c3c120872531ffffd8799fd87a9f581cb5fdcab47fb13552725674580ac5913897ff98ab345d66e4659272f2ffffd8799fd87a9f581c989f9f230efa5a7d3df32768f80edf1a0f0c9228917dfe4ba58e8887ffffd8799fd87a9f581cffaa991f62323723573304e589186b76782ac85f4c778e2fb9961703ffffd8799fd87a9f581c18a756323a406e37d1d0f0ea1b5d226cfc1c8ed724cd94b85d605dfbffffd8799fd87a9f581c55d0b42920a5c68e822e092cc1fcc80cf8c07fe2d1cb12ba4cf6a34190ffffd8799fd87a9f581c47ad55d8a36a2a587a21e03111cf9bf145d3d527fcf18cc837db257affffd8799fd87a9f581c27c2dbbe7194e6ffaaa6f0e1fbf5fa0ef4cb87ea32c007511c4cbd81ffffd8799fd87a9f581c94eebf3c0b56eca658e08d5acbdc57fa4f01b58d554e9e6d330f2b3fffffff004c0127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff0001', treasury),
        new JobContractInstantBuy(ContractType.JobInstantBuy, true, 'cc572503d64165b8ef1bb3d0c311b83924483cfff55ea74d0b3370b3', {
            txHash: '9f23b7d827870c38d736e5016c9f4d85de7a8470a3614b7a1a492f00fa757a56',
            outputIndex: 1
        }, '', treasury),
        treasury,
        // Stake
        new JobContract(ContractType.JobStake, true, '75f706c9cfb759c05c77e7db13a45c6706a0caabee576e3ca11a49bd', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 0
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101010001'),
        new JobContract(ContractType.JobStake, true, 'd75e5d7b05677da8fcf1559604b78f1a04a4efe66824c3c120872531', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 1
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101020001'),
        new JobContract(ContractType.JobStake, true, 'b5fdcab47fb13552725674580ac5913897ff98ab345d66e4659272f2', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 2
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101030001'),
        new JobContract(ContractType.JobStake, true, '989f9f230efa5a7d3df32768f80edf1a0f0c9228917dfe4ba58e8887', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 3
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101040001'),
        new JobContract(ContractType.JobStake, true, 'ffaa991f62323723573304e589186b76782ac85f4c778e2fb9961703', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 4
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101050001'),
        new JobContract(ContractType.JobStake, true, '18a756323a406e37d1d0f0ea1b5d226cfc1c8ed724cd94b85d605dfb', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 5
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101060001'),
        new JobContract(ContractType.JobStake, true, '55d0b42920a5c68e822e092cc1fcc80cf8c0e2d1cb12ba4cf6a34190', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 6
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101070001'),
        new JobContract(ContractType.JobStake, true, '47ad55d8a36a2a587a21e03111cf9bf145d3d527fcf18cc837db257a', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 7
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101080001'),
        new JobContract(ContractType.JobStake, true, '27c2dbbe7194e6ffaaa6f0e1fbf5fa0ef4cb87ea32c007511c4cbd81', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 8
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c0101090001'),
        new JobContract(ContractType.JobStake, true, '94eebf3c0b56eca658e08d5acbdc57fa4f01b58d554e9e6d330f2b3f', {
            txHash: '80d551fb2866d20d5572d0529696cd3805fb3575bb35cc290020eb59c22b2b65',
            outputIndex: 9
        }, '590213010000333232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d1260127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff004c01010a0001'),
        // Lock
        new JobContract(ContractType.JobLock, true, 'cb3fb529db5886437c2dc452dfb30e0826cf6befd6dfd5d171dbb692', undefined, '59020a010000332323232323232323232322222533300932533300a3370e900000089919191919299980799b87480000044c8c8cc88c8cc00400400c894ccc06000452809919299980b99b8f00200514a226600800800260380046eb8c068004dd6198069807998069807804a400090080009bae3015001300d00214a0601a002602400260140026020002601000a26464664466e24004ccc888c8cc004004010894ccc05800440104c8c8cc014008cc010010004c068008c060004dd6198051806198051806003240009000240004466e00004cc88c8c8cc004004008894ccc0600045200013232323232337000040026600c00c0066eb4c06800cdd7180c001180e001180d0009919299980a19b874800800452f5bded8c02646eacc068004c048008c048004c8cc00400400c894ccc05c0045300103d87a800013232323253330183371e00e004266e9520003301c374c00297ae0133006006003375660320066eb8c05c008c06c008c064004dd59980618071980618070012400490010021bae33008300a00148000dd6998041805000a40046020002601000a60100082930b19800800a40004444666600e66e1c00400c0308cccc014014cdc000224004601c0020040044600a6ea80048c00cdd5000ab9a5573aaae7955cfaba05742ae89300127d87a9fd8799f581c74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a01ffff0001'),
    ], [
        '75f706c9cfb759c05c77e7db13a45c6706a0caabee576e3ca11a49bd',
        'd75e5d7b05677da8fcf1559604b78f1a04a4efe66824c3c120872531',
        'b5fdcab47fb13552725674580ac5913897ff98ab345d66e4659272f2',
        '989f9f230efa5a7d3df32768f80edf1a0f0c9228917dfe4ba58e8887',
        'ffaa991f62323723573304e589186b76782ac85f4c778e2fb9961703',
        '18a756323a406e37d1d0f0ea1b5d226cfc1c8ed724cd94b85d605dfb',
        '55d0b42920a5c68e822e092cc1fcc80cf8c0e2d1cb12ba4cf6a34190',
        '47ad55d8a36a2a587a21e03111cf9bf145d3d527fcf18cc837db257a',
        '27c2dbbe7194e6ffaaa6f0e1fbf5fa0ef4cb87ea32c007511c4cbd81',
        '94eebf3c0b56eca658e08d5acbdc57fa4f01b58d554e9e6d330f2b3f'
    ]);
}
function getContextMainnet() {
    throw new Error("Un implemented");
}
function getContext(lucid) {
    switch (lucid.network) {
        case "Preprod":
            return getContextPreprod();
        case "Preview":
            return getContextPreview();
        case "Mainnet":
            return getContextMainnet();
    }
    throw new Error("Unknow network");
}

function query(url, method, body) {
    if (body) {
        body = JSON.stringify(body, (_, v) => typeof v === 'bigint' ? Number(v) : v);
    }
    return fetch(url, {
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        method,
        body,
    });
}
class Job {
    context;
    jobApiUrl;
    numberOfStakes = 10n;
    numberOfToken = 1n;
    treasuryDatum;
    lucid;
    constructor(lucid, jobApiUrl) {
        this.lucid = lucid;
        this.context = getContext(lucid);
        this.jobApiUrl = jobApiUrl;
        this.treasuryDatum = Data.to(encodeTreasuryDatumTokens(this.context.jobTokenPolicy, BigInt(this.context.numberOfToken)));
    }
    addressToDatum(address) {
        const credential = this.lucid.utils.paymentCredentialOf(address);
        const datum = encodeTreasuryDatumAddress(credential.hash);
        return Data.to(datum);
    }
    tokenToDatum(policyId, minTokens) {
        const datum = encodeTreasuryDatumTokens(policyId, minTokens);
        return Data.to(datum);
    }
    async sign(payload) {
        const address = await this.lucid.wallet.address();
        const message = await this.lucid.wallet.signMessage(address, fromText(payload));
        return {
            address,
            secret: payload,
            signature: message.signature,
            key: message.key
        };
    }
    async payJoBToken(tx, amount) {
        if (!amount) {
            amount = BigInt(this.context.numberOfToken);
        }
        return tx.payToAddress(await this.lucid.wallet.address(), {
            [this.context.jobTokenPolicy + this.context.jobTokenName]: amount
        });
    }
    async squashNft() {
        const utxos = await this.lucid.wallet.getUtxos();
        const assets = {
            lovelace: 0n
        };
        for (let utxo of utxos) {
            for (let asset in utxo.assets) {
                if (asset in assets) {
                    assets[asset] += BigInt(utxo.assets[asset]);
                }
                else {
                    assets[asset] = BigInt(utxo.assets[asset]);
                }
            }
        }
        assets.lovelace -= 2000000n;
        const tx = await this.lucid
            .newTx()
            .collectFrom(utxos)
            .payToAddress(await this.lucid.wallet.address(), assets)
            .complete();
        const signedTx = await tx
            .sign()
            .complete();
        const txHash = await signedTx.submit();
        return {
            txHash,
            outputIndex: 0
        };
    }
    async getEncodedAddress(address) {
        if (!address)
            address = await this.lucid.wallet.address();
        const payCred = this.lucid.utils.paymentCredentialOf(address);
        try {
            const stakeCred = this.lucid.utils.stakeCredentialOf(address);
            return encodeAddress(payCred.hash, stakeCred.hash);
        }
        catch (e) {
            return encodeAddress(payCred.hash);
        }
    }
    getTreasuryAddress(stakeId) {
        return this.context.getContractAddress(this.lucid, this.context.getContract(ContractType.JobTreasury), stakeId);
    }
    getInstantBuyAddress(stakeId) {
        return this.context.getContractAddress(this.lucid, this.context.getContract(ContractType.JobInstantBuy), stakeId);
    }
    getOfferAddress(stakeId) {
        return this.context.getContractAddress(this.lucid, this.context.getContract(ContractType.JobOffer), stakeId);
    }
    createTreasuryTx(tx, unique, total, datum, amount = 2000000n) {
        const stakeNumber = this.context.getStakeNumber();
        const start = Math.floor(Math.random() * stakeNumber);
        const uniqueStakes = [];
        // Set numbers to list
        for (let i = 0; i < unique; i++) {
            uniqueStakes.push((start + i * 13) % stakeNumber);
        }
        for (let i = 0; i < total; i++) {
            tx = tx.payToContract(this.getTreasuryAddress(uniqueStakes[i % uniqueStakes.length]), { inline: datum }, { lovelace: amount });
        }
        return tx;
    }
    async createTreasury(unique, total, datum, amount = 2000000n) {
        let tx = this.lucid.newTx();
        tx = this.createTreasuryTx(tx, unique, total, datum, amount);
        return await this.finishTx(tx);
    }
    async createTreasuryAddress(address, unique, total, amount = 2000000n) {
        const credential = this.lucid.utils.paymentCredentialOf(address);
        const datum = encodeTreasuryDatumAddress(credential.hash);
        return await this.createTreasury(unique, total, Data.to(datum), amount);
    }
    async createTreasuryToken(policyId, minTokens, unique, total, data, amount = 2000000n) {
        const datum = encodeTreasuryDatumTokens(policyId, minTokens);
        return await this.createTreasury(unique, total, Data.to(datum), amount);
    }
    async getTreasuriesReserve(utxo, affiliates, force) {
        const url = `${this.jobApiUrl}treasury/reserve`;
        const body = {
            utxo,
            affiliates,
            force
        };
        const response = await query(url, 'POST', body);
        return await response.json();
    }
    async getTreasuryUtxos(plutus) {
        const url = `${this.jobApiUrl}treasury/utxos/${plutus}`;
        const response = await query(url, 'GET');
        return await response.json();
    }
    async getTreasuryWithdraw(plutus) {
        const url = `${this.jobApiUrl}treasury/withdraw`;
        const body = {
            plutus,
            params: await this.sign(String(Date.now()))
        };
        const response = await query(url, 'POST', body);
        return await response.json();
    }
    getAffiliates(utxo, treasuries) {
        this.lucid.utils.paymentCredentialOf(utxo.address).hash;
        let affiliates = treasuries.map(treasury => treasury.treasury);
        // Instant buy
        const contract = this.context.getContractByAddress(utxo.address);
        if (contract.type == ContractType.JobInstantBuy) {
            const datum = contract.parseDatum(this.lucid, utxo.datum);
            affiliates.push(datum.listingMarketDatum);
            if (datum.listingAffiliateDatum) {
                affiliates.push(datum.listingAffiliateDatum);
            }
            if (datum.royalty) {
                affiliates.push(datum.royalty.treasury);
            }
            return affiliates;
        }
        // Offer
        if (contract.type == ContractType.JobOffer) {
            const datum = contract.parseDatum(this.lucid, utxo.datum);
            affiliates.push(datum.listingMarketDatum);
            if (datum.listingAffiliateDatum) {
                affiliates.push(datum.listingAffiliateDatum);
            }
            if (datum.royalty) {
                affiliates.push(datum.royalty.treasury);
            }
            return affiliates;
        }
        return affiliates;
    }
    async lockContractUtxo(utxo, ...treasuries) {
        try {
            const affiliates = this.getAffiliates(utxo, treasuries);
            const result = await this.getTreasuriesReserve(utxo, affiliates, false);
            if (result.all) {
                return Lock.Locked;
            }
            if (result.utxos.size > 0) {
                return Lock.Partial;
            }
            return Lock.Blocked;
        }
        catch (e) {
            console.error(e);
            return Lock.Error;
        }
    }
    async lockContractRef(ref, ...treasuries) {
        try {
            const [utxo] = await this.lucid.utxosByOutRef([ref]);
            return await this.lockContractUtxo(utxo, ...treasuries);
        }
        catch (e) {
            console.error(e);
            return Lock.Error;
        }
    }
    async lockContractUnit(unit, ...treasuries) {
        try {
            const utxo = await this.lucid.utxoByUnit(unit);
            return await this.lockContractUtxo(utxo, ...treasuries);
        }
        catch (e) {
            console.error(e);
            return Lock.Error;
        }
    }
    async withdrawTreasuryTx(tx, utxos, datum, reduce = false) {
        const treasuries = new Map();
        const collectFrom = await this.lucid.utxosByOutRef(utxos);
        for (let utxo of collectFrom) {
            if (utxo.datum == datum) {
                const contract = this.context.getContractByAddress(utxo.address);
                tx = await contract.collectTx(this.lucid, tx, utxo, Data.to(new Constr(1, [])));
                treasuries.set(utxo.address, (treasuries.get(utxo.address) || 0n) + utxo.assets.lovelace);
                if (!reduce) {
                    tx.payToContract(utxo.address, { inline: utxo.datum }, { lovelace: this.context.minimumAdaAmount });
                }
            }
        }
        if (reduce) {
            for (let address of treasuries.keys()) {
                tx.payToContract(address, { inline: datum }, { lovelace: this.context.minimumAdaAmount });
            }
        }
        // tx = tx.attachSpendingValidator(this.treasuryScript)
        return tx;
    }
    async withdrawTreasuryRaw(utxos, datum, reduce = false) {
        let tx = this.lucid.newTx();
        tx = await this.withdrawTreasuryTx(tx, utxos, datum, reduce);
        tx = tx.addSigner(await this.lucid.wallet.address());
        return await this.finishTx(tx);
    }
    async withdrawTreasury(plutus, reduce = false) {
        const treasuries = await this.getTreasuryWithdraw(plutus);
        return await this.withdrawTreasuryRaw(treasuries.utxos, plutus, reduce);
    }
    getTreasury(treasuries, datum) {
        const index = treasuries.findIndex((value) => {
            return value.datum == datum;
        });
        if (index > -1) {
            const element = treasuries[index];
            // Removed splice
            // treasuries.splice(index, 1)
            return element;
        }
        return undefined;
    }
    addToTreasuries(treasuries, datum, value) {
        const prev = treasuries.get(datum) || 0n;
        treasuries.set(datum, prev + value);
    }
    async payToTreasuries(tx, contract, utxo, payToTreasuries, force) {
        // JoB treasury
        const treasuryRequest = await this.getTreasuriesReserve(utxo, Array.from(payToTreasuries.keys()), force);
        if (!treasuryRequest.all && !force) {
            throw new Error('Treasuries are not avaible');
        }
        const allTreasuries = await this.lucid.utxosByOutRef(Object.values(treasuryRequest.utxos));
        // Pay to treasuries
        for (let [datum, _] of payToTreasuries) {
            const treasury = this.getTreasury(allTreasuries, datum);
            // Treasury exists
            if (treasury) {
                const contract = await this.context.getContractByAddress(treasury.address);
                tx = await contract.collectTx(this.lucid, tx, treasury, Data.void());
                tx = tx.payToContract(treasury.address, { inline: datum }, { lovelace: BigInt(treasury.assets.lovelace) + BigInt(Math.max(Number(this.context.minimumFee), Number(payToTreasuries.get(datum)))) });
            }
            // There is no free treasury
            else {
                tx = tx.payToContract(this.context.getContractAddress(this.lucid, contract), { inline: datum }, { lovelace: BigInt(Math.max(Number(payToTreasuries.get(datum)), Number(this.context.minimumFee))) });
            }
        }
        return tx;
    }
    async instantBuyListTx(tx, unit, price, listing, affiliate, royalty) {
        if (typeof listing == "undefined") {
            listing = this.treasuryDatum;
        }
        const sellerAddr = await this.getEncodedAddress();
        const datum = new Constr(0, [
            sellerAddr,
            Data.from(listing),
            affiliate ? new Constr(0, [Data.from(affiliate)]) : new Constr(1, []),
            price,
            encodeRoyalty(royalty)
        ]);
        tx = tx.payToContract(this.getInstantBuyAddress(), { inline: Data.to(datum) }, {
            [unit]: BigInt(1),
            lovelace: this.context.minimumAdaAmount
        });
        return tx;
    }
    async instantbuyList(unit, price, listing, affiliate, royalty) {
        let txList = this.lucid.newTx();
        txList = await this.instantBuyListTx(txList, unit, price, listing, affiliate, royalty);
        return await this.finishTx(txList);
    }
    async instantBuyCancelTx(tx, utxo) {
        const [toSpend] = await this.lucid.utxosByOutRef([utxo]);
        const contract = await this.context.getContractByAddress(toSpend.address);
        try {
            tx = await contract.collectTx(this.lucid, tx, toSpend, Data.to(new Constr(1, [])));
            tx = tx.addSigner(await this.lucid.wallet.address());
        }
        catch (e) {
            tx = tx.collectFrom([toSpend]);
        }
        return tx;
    }
    async instantBuyCancel(utxo) {
        let txCancel = this.lucid.newTx();
        txCancel = await this.instantBuyCancelTx(txCancel, utxo);
        return await this.finishTx(txCancel);
    }
    async instantBuyUpdateTx(tx, unit, price, listing, affiliate, royalty) {
        const toSpend = await this.lucid.utxoByUnit(unit);
        tx = await this.instantBuyCancelTx(tx, {
            txHash: toSpend.txHash,
            outputIndex: toSpend.outputIndex
        });
        tx = await this.instantBuyListTx(tx, unit, price, listing, affiliate, royalty);
        return tx;
    }
    async instantBuyUpdate(unit, price, listing, affiliate, royalty) {
        let txUpdate = this.lucid.newTx();
        txUpdate = await this.instantBuyUpdateTx(txUpdate, unit, price, listing, affiliate, royalty);
        return await this.finishTx(txUpdate);
    }
    async instantBuyProceedTx(tx, utxo, force = false, ...sellMarketPortions) {
        const [collectUtxo] = await this.lucid.utxosByOutRef([
            utxo
        ]);
        const contract = await this.context.getContractByAddress(collectUtxo.address);
        const params = contract.parseDatum(this.lucid, collectUtxo.datum);
        const provision = 0.025 * Number(params.amount);
        const payToTreasuries = new Map();
        payToTreasuries.set(this.treasuryDatum, BigInt(Math.max(Math.ceil(provision * 0.1), Number(this.context.minimumJobFee))));
        this.addToTreasuries(payToTreasuries, params.listingMarketDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        this.addToTreasuries(payToTreasuries, params.listingAffiliateDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        for (let portion of sellMarketPortions) {
            this.addToTreasuries(payToTreasuries, portion.treasury.toLowerCase(), BigInt(Math.max(Math.ceil(Number(provision) * 0.5 * portion.percent), Number(this.context.minimumFee))));
        }
        if (params.royalty) {
            this.addToTreasuries(payToTreasuries, params.royalty.treasury.toLowerCase(), BigInt(Math.ceil(Number(params.amount) * params.royalty.percent)));
        }
        const buyRedeemer = Data.to(new Constr(0, [
            sellMarketPortions.map(portion => new Constr(0, [
                BigInt(Math.ceil(portion.percent * 10000)),
                Data.from(portion.treasury)
            ]))
        ]));
        let buildTx = await contract.collectTx(this.lucid, tx, collectUtxo, buyRedeemer);
        buildTx = buildTx.payToAddress(params.beneficier, { lovelace: params.amount + collectUtxo.assets.lovelace });
        return await this.payToTreasuries(buildTx, contract.treasury, utxo, payToTreasuries, force);
    }
    async instantBuyProceed(utxo, force = false, ...sellMarketPortions) {
        let buildTx = this.lucid.newTx();
        buildTx = await this.instantBuyProceedTx(buildTx, utxo, force, ...sellMarketPortions);
        return await this.finishTx(buildTx);
    }
    async offerListTx(tx, asset, price, listing, affiliate, royalty) {
        if (typeof listing == "undefined") {
            listing = this.treasuryDatum;
        }
        const offererAddr = await this.getEncodedAddress();
        const datum = new Constr(0, [
            offererAddr,
            Data.from(listing),
            affiliate ? new Constr(0, [Data.from(affiliate)]) : new Constr(1, []),
            price,
            encodeWantedAsset(asset),
            encodeRoyalty(royalty)
        ]);
        tx = tx.payToContract(this.getOfferAddress(), { inline: Data.to(datum) }, {
            lovelace: this.context.minimumAdaAmount + price
        });
        return tx;
    }
    async offerList(asset, price, listing, affiliate, royalty) {
        let txList = this.lucid.newTx();
        txList = await this.offerListTx(txList, asset, price, listing, affiliate, royalty);
        return {
            txHash: await this.finishTx(txList),
            outputIndex: 0
        };
    }
    async offerCancelTx(tx, utxo) {
        const [toSpend] = await this.lucid.utxosByOutRef([utxo]);
        const contract = await this.context.getContractByAddress(toSpend.address);
        tx = await contract.collectTx(this.lucid, tx, toSpend, Data.to(new Constr(1, [])));
        return tx.addSigner(await this.lucid.wallet.address());
    }
    async offerCancel(utxo) {
        let txCancel = this.lucid.newTx();
        txCancel = await this.offerCancelTx(txCancel, utxo);
        return await this.finishTx(txCancel);
    }
    async offerUpdateTx(tx, utxo, asset, price, listing, affiliate, royalty) {
        tx = await this.offerCancelTx(tx, utxo);
        tx = await this.offerListTx(tx, asset, price, listing, affiliate, royalty);
        return tx;
    }
    async offerUpdate(utxo, asset, price, listing, affiliate, royalty) {
        let txUpdate = this.lucid.newTx();
        txUpdate = await this.offerUpdateTx(txUpdate, utxo, asset, price, listing, affiliate, royalty);
        return await this.finishTx(txUpdate);
    }
    async offerProceedTx(tx, utxo, unit, force = false, ...sellMarketPortions) {
        const [collectUtxo] = await this.lucid.utxosByOutRef([
            utxo
        ]);
        const contract = await this.context.getContractByAddress(collectUtxo.address);
        const params = contract.parseDatum(this.lucid, collectUtxo.datum);
        const provision = 0.025 * Number(params.amount);
        console.debug("Offer", params);
        const payToTreasuries = new Map();
        payToTreasuries.set(this.treasuryDatum, BigInt(Math.max(Math.ceil(provision * 0.1), Number(this.context.minimumJobFee))));
        this.addToTreasuries(payToTreasuries, params.listingMarketDatum.toLocaleLowerCase(), BigInt(Math.ceil(Number(provision) * 0.2)));
        this.addToTreasuries(payToTreasuries, params.listingAffiliateDatum.toLowerCase(), BigInt(Math.ceil(Number(provision) * 0.2)));
        for (let portion of sellMarketPortions) {
            this.addToTreasuries(payToTreasuries, portion.treasury.toLowerCase(), BigInt(Math.ceil(Number(provision) * 0.5 * portion.percent)));
        }
        if (params.royalty) {
            this.addToTreasuries(payToTreasuries, params.royalty.treasury.toLowerCase(), BigInt(Math.ceil(Number(params.amount) * params.royalty.percent)));
        }
        const buyRedeemer = Data.to(new Constr(0, [
            sellMarketPortions.map(portion => new Constr(0, [
                BigInt(Math.ceil(portion.percent * 10000)),
                Data.from(portion.treasury)
            ]))
        ]));
        let buildTx = await contract.collectTx(this.lucid, tx, collectUtxo, buyRedeemer);
        buildTx = buildTx.payToAddress(params.beneficier, {
            lovelace: this.context.minimumAdaAmount,
            [unit]: 1n
        });
        return await this.payToTreasuries(buildTx, contract.treasury, utxo, payToTreasuries, force);
    }
    async offerProceed(utxo, unit, force = false, ...sellMarketPortions) {
        let buildTx = this.lucid.newTx();
        buildTx = await this.offerProceedTx(buildTx, utxo, unit, force, ...sellMarketPortions);
        return await this.finishTx(buildTx);
    }
    registerStakeTx(tx, stake) {
        let newTx = tx.registerStake(stake);
        return newTx;
    }
    async registerStakes(stakes) {
        let newTx = this.lucid.newTx();
        for (let stake of stakes) {
            newTx = newTx.registerStake(stake);
        }
        newTx = await this.addJobTokens(newTx);
        return await this.finishTx(newTx);
    }
    delegateTx(tx, stake, poolId) {
        const credential = this.lucid.utils.scriptHashToCredential(stake);
        const rewardAddress = this.lucid.utils.credentialToRewardAddress(credential);
        let newTx = tx.delegateTo(rewardAddress, poolId, Data.void());
        return newTx;
    }
    async delegate(stake, poolId) {
        let newTx = this.lucid.newTx();
        newTx = this.delegateTx(newTx, stake, poolId);
        newTx = await this.addJobTokens(newTx);
        newTx = await this.context.getContractByHash(stake).attachTx(this.lucid, newTx);
        return await this.finishTx(newTx);
    }
    withdrawTx(tx, stake, amount) {
        const credential = this.lucid.utils.scriptHashToCredential(stake);
        const rewardAddress = this.lucid.utils.credentialToRewardAddress(credential);
        let newTx = tx.withdraw(rewardAddress, amount, Data.void());
        return newTx;
    }
    async withdraw(stake, amount) {
        let newTx = this.lucid.newTx();
        newTx = this.withdrawTx(newTx, stake, amount);
        newTx = await this.addJobTokens(newTx);
        newTx = await this.context.getContractByHash(stake).attachTx(this.lucid, newTx);
        return await this.finishTx(newTx);
    }
    async addJobTokens(tx) {
        return tx.payToAddress(await this.lucid.wallet.address(), { [this.context.jobTokenPolicy + this.context.jobTokenName]: this.numberOfToken });
    }
    async finishTx(tx) {
        const txComplete = await tx.complete();
        const signedTx = await txComplete.sign().complete();
        const txHash = await signedTx.submit();
        return txHash;
    }
}

export { Context, ContractBase, ContractType, Job, Lock, encodeAddress, encodeRoyalty, encodeTreasuryDatumAddress, encodeTreasuryDatumTokens, encodeWantedAsset };
//# sourceMappingURL=contract-lib.esm.js.map
