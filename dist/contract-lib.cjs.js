'use strict';

var lucidCardano = require('lucid-cardano');

const plutus = {
    "preamble": {
        "title": "JamOnBread/contract",
        "description": "Aiken contracts for project 'JamOnBread/contract'",
        "version": "0.0.0",
        "plutusVersion": "v2",
        "license": "Apache-2.0"
    },
    "validators": [
        {
            "title": "assets.mint_v1",
            "redeemer": {
                "title": "_redeemer",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "parameters": [
                {
                    "title": "utxo",
                    "schema": {
                        "$ref": "#/definitions/aiken~1transaction~1OutputReference"
                    }
                }
            ],
            "compiledCode": "590134010000323232323232323232323232222533300832323232533300c3370e900018058008991919299980799b87480000044c92898068010a998082491e5554784f206973206e6f742070726573656e74206173206120696e7075740016300d0013322323300100100322533301500114c103d87a80001323253330133375e6601e60220049000002899ba548000cc0600092f5c02660080080026032004602e0026eb0cc024c02c0112000008300a001153300d4912a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001630110013011002300f0013006001149858cc0040052000222233330073370e00200601a4666600a00a66e000112002300f001002002230063754002460086ea80055cd2b9c5573aaae7955cfaba05742ae89",
            "hash": "d79dc11b48d98acbed9040386eb1e2eb5a0ec67b5c988a78613753c5"
        },
        {
            "title": "common.always_fail_v1",
            "datum": {
                "title": "_datum",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "redeemer": {
                "title": "_redeemer",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "compiledCode": "500100003222253330044a02930b2b9a01",
            "hash": "792d0602968de1d5378c0914ca308ff4925014717505a63306dee11f"
        },
        {
            "title": "common.always_succeed_v1",
            "datum": {
                "title": "_datum",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "redeemer": {
                "title": "_redeemer",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "compiledCode": "500100003222253330044a22930b2b9a01",
            "hash": "90592520b329fe08f0e93946ecd405e49b7480795e27cb618f002d88"
        },
        {
            "title": "instant_buy.spend_v1",
            "datum": {
                "title": "datum",
                "schema": {
                    "$ref": "#/definitions/common~1types~1InstantBuyDatum"
                }
            },
            "redeemer": {
                "title": "redeemer",
                "schema": {
                    "$ref": "#/definitions/instant_buy~1InstantBuyRedeemer"
                }
            },
            "parameters": [
                {
                    "title": "treasury_script_hash",
                    "schema": {
                        "$ref": "#/definitions/ByteArray"
                    }
                },
                {
                    "title": "stake_addresses",
                    "schema": {
                        "$ref": "#/definitions/List$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
                    }
                },
                {
                    "title": "job",
                    "schema": {
                        "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                    }
                }
            ],
            "compiledCode": "",
            "hash": "c7035756f897e3db1243bf815a0cf0f95f5a3d5b2d1a620c0184294b"
        },
        {
            "title": "offer.spend_v1",
            "datum": {
                "title": "datum",
                "schema": {
                    "$ref": "#/definitions/common~1types~1OfferDatum"
                }
            },
            "redeemer": {
                "title": "redeemer",
                "schema": {
                    "$ref": "#/definitions/offer~1OfferRedeemer"
                }
            },
            "parameters": [
                {
                    "title": "treasury_script_hash",
                    "schema": {
                        "$ref": "#/definitions/ByteArray"
                    }
                },
                {
                    "title": "stake_addresses",
                    "schema": {
                        "$ref": "#/definitions/List$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
                    }
                },
                {
                    "title": "job",
                    "schema": {
                        "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                    }
                }
            ],
            "compiledCode": "5915b3010000323232323232323232323232232232222232323232325333012323253330143370e9001000899191919299980c19b8748000c05c0044c8c8c8c8c8c94ccc078cdc3a400400226464a66604066e1d2000001132323322323300100100322533302a00114a026464a66605066e3c00801452889980200200098170011bae302c00137586603c60406603c604002c9000240200026eb8c09c004c078008528180f0009980d180e1980d180e00a2400090000991919191919192999812991919192999814a999814a999814a999814a99981499b89337006eb4cc094c09c07d2006482024bd004c008dd5998129813806a4004294454cc0a92415676616c75652e6c6f76656c6163655f6f6628696e7075742e76616c756529203e3d20646174756d2e6f6666657265645f7072696365202b20636f6e7374616e742e6d696e5f6164615f76616c7565203f2046616c73650014a02a66605266e212080897a375a6604a604e03e90030a51153302a49013d646174756d2e6f6666657265645f7072696365203e20636f6e7374616e742e6d696e696d616c5f636f6e74726163745f7072696365203f2046616c73650014a029404ccc8c0040048894ccc0c00085288992999818800899299981719b89337000066eb4cc0a8c0b000520004828270045288a99817a493273756d202b20782e706f7274696f6e203c3d20636f6e7374616e742e66697865645f646563696d616c73203f2046616c73650014a060660062646466600c00c00266e00010dd699815981680124000606a0086066006606600401490000a50153330293333322222323300100100522533303400114a226464a66606466e24dd6981a80119b8133332222323253330383370e90000008991918099bab33036303800148008c0fc004c0d8008520003036001330200042533303733300e3303330350014800001000c4cdd799819981a800a400866e9520043303c0024bd700a5037586605c606000e9002003002981a001199991111919299981c19b87480000044c8c8c04cdd59981b181c1981b181c000a40049001181f800981b0010a4000606c002660400084a66606e66601c66066606a66066606a002900124000008006266ebccc0ccc0d4cc0ccc0d4005200248010cdd2a40086607800497ae014a06eb0cc0b8c0c001d2000006005303400213300400400114a06070004606c002444a66605866ebccc0a0c0a800d20003374a9001198189ba90024bd70099802000919baf33029302b00448008cdd2a40006606400297ae014a000a6604a604e03a90000118108a51153302a4916b6d6574686f642e636865636b5f616c6c5f70726f766973696f6e732870726f766973696f6e732c20636f6e746578742e7472616e73616374696f6e2c2074726561737572795f7363726970745f686173682c207374616b655f61646472657373657329203f2046616c73650014a0294054ccc0a4cccc8888cc01401094ccc0b8cdd7998151816000a4000008264a66605e66e1d2000001132323232323253330353371290011998079bab3303130330084800800c0044cdc480498071bab330313033008480085281bae303a001303a002375c6070002605e002606c002605a00826464a66606266606264a66606c002294452819911919299981a99b874800800452f5bded8c02646eacc0f0004c0cc008c0cc004cc038008004dd59981698178022400400294128899b89005300a37566605a605e00890010a50375c606c002605a008605a0062940dd619812981399812981380ea4000900219812981380fa40006604a604e03e90042410125e802294454cc0a9241856d6574686f642e636865636b5f72657175697265645f7061796d656e7428636f6e746578742e7472616e73616374696f6e2e6f7574707574732c20646174756d2e6f6666657265725f616464726573732c20646174756d2e77616e7465645f61737365742c20636f6e7374616e742e6d696e5f6164615f76616c756529203f2046616c73650014a0294088c8cc00400400c894ccc0c000452809919299981718028010a5113300400400130340023032001233300200148900488100222323232533302c3370e90010008a40002646eb4c0cc004c0a8008c0a8004c94ccc0accdc3a40040022980103d87a800013232323300100100222533303300114c103d87a800013232323253330333371e016004266e95200033038375000297ae0133006006003375a606a0066eb8c0cc008c0dc008c0d4004dd5981900098148011814800998020018011119198008008019129998168008a6103d87a8000132323232533302d3371e00e004266e95200033032374c00297ae01330060060033756605e0066eb8c0b4008c0c4008c0bc0044ccc888c8cc004004010894ccc0b8004528899192999816299981619baf33028302a00248000014528899baf33028302a33028302a33028302a002480092000480000184cc0100100044c94ccc0b4cdc3a400060580022646600c00c00660560022a6605c9212a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633028302a33028302a33028302a00248009200048000c0c8008c0c0004dd619810981199810981180ca4000900019ba548008cc0a8dd480fa5eb800405281bab302600133332222323232337606e98008dd40009bad302c0023756605400264a66605066e1d200000113232323232533302d3370e9000000899191919299981899baf0013302d302f00c480004cdd81ba600f375066e040380344cdd81ba633301000f3302d302f0084800801cdd419b813370201c00e01a606c002605a00260680026056004266ec0dd3199806005998149815802240040066ea0cdc099b8100a003009302b00133027302900248008cdc199b82007375a6604c60500029000241413802605e002604c004266ec0dd30031ba83370200a008604c0026eb4cc07cc08406520060033301f302101948000cc07cc084065200a32323232333001001002007222533302c00110021323233300500533300900433026302800248008cdc199b8200a3370666e0920904e375a6604c6050004900024141380290504e0080098180011817000999801800999119299981399b874800800440084c8c0b8004c09400cc094008cc080c088069200433020302201a48008cdc199b82004482807d20a09c013330020013301f302101948008cdc199b82003482807d20a09c013330014bd6f7b63000c9991299981219b88001002100210013370666e0800920d00f48282700520c09a0c222323300100100422533302a00113302b337600086ea000d2f5bded8c026464a66605066ebcc0a80080184cc0b4cdd80031ba8337006eb4c0ac0080140044cc0b4008cc010010004c0b8008c0b0004cdc199b82375a66038603c02c9003241e80690504e009bac3025001301c013301c012302200130220013018001301f0013016001153301949012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633223300300223375e6602c603000290000011bac33013301533013301500b48001200000222323300100100322533301e00114c0103d87a800013232533301c300500213374a90001981080125eb804cc010010004c088008c080004c06c004c0480085281809000998071808003240042930b19299980919b87480000044c8c94ccc060c06c0084c926323300100100222533301a00114984c8cc00c00cc078008c8c94ccc060cdc3a4000002264646464a66604060460042649318068008a9980ea49334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630210013021002375a603e002602c0042a660329212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163016001301c0011533015491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001637586032002602000e2a66602466e1d2002001153330163010007149854cc04d24011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330134912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e74001630100063253330113370e90000008991919191919191919191919299981098120010991919191924c64a66604466e1d2000001132325333028302b002132498c94ccc094cdc3a4000002264646464a66605a606000426493180d0008a998152481334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016302e001302e002375a605800260460042a6604c9212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016302300115330254901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630290013020006153330223370e90010008a99981318100030a4c2a6604692011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330234912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e74001630200053253330213370e9000000899192999813981500109924c64a66604866e1d2000001132323232533302c302f002149854cc0a52401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c605a002605a0046eb8c0ac004c08800854cc0952412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016302200115330244901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163028001301f007153330213370e900100089919299981398150010a4c2a660489201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c6050002603e00e2a660449212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301f0063253330203370e9000000899192999813181480109924c60260022a66046921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163027001301e00a153330203370e90010008a999812180f0050a4c2a6604292011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330214912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301e009300f00a300f00b153301e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163022001302200230200013020002375a603c002603c00460380026038004603400260340046030002601e00e2a660249212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300f00623253330113370e900000089919299980b980d00109924c600a0022a660289201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163018001300f002153330113370e900100089919299980b980d00109924c64a66602866e1d2000001132323232533301c301f002149854cc0652401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a603a002603a0046eb8c06c004c04800854cc0552412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301200115330144901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20657870656374656400163018001300f00215330124912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300f00123253330103370e9000000899191919299980c180d8010991924c64a66602c66e1d200000113232533301c301f002132498c94ccc064cdc3a400000226464a66603e60440042649318070008a9980e249334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630200013017002153330193370e90010008991919191919299981198130010a4c2a660409201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a604800260480046eb4c088004c088008dd69810000980b8010a9980d24812b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301700115330194901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301d0013014003153330163370e90010008a99980d180a0018a4c2a6602e92011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330174912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301400230070031533015491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301900130190023017001300e00215330114912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300e001232533300f3370e900000089919299980a980c0010a4c2a66024921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602c002601a0042a66601e66e1d20020011323253330153018002149854cc0492401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602c002601a0042a660209212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300d00137580026eb8004cc0040052000222233330073370e00200601a4666600a00a66e000112002300f001002002230063754002460086ea80055cd2b9c5573aaae7955cfaba05742ae881",
            "hash": "e5ec3673e3d8310750265b7d8d6bfdebd1c052aca89c6d3e294647a5"
        },
        {
            "title": "staking.withdrawal_v1",
            "redeemer": {
                "title": "_redeemer",
                "schema": {
                    "$ref": "#/definitions/Data"
                }
            },
            "parameters": [
                {
                    "title": "withdrawal_method",
                    "schema": {
                        "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                    }
                },
                {
                    "title": "_number",
                    "schema": {
                        "$ref": "#/definitions/Int"
                    }
                }
            ],
            "compiledCode": "5901e20100003232323232323232323232223222533300a32533300b3370e900000089919191919299980819b87480000044c8c8cc88c8cc00400400c894ccc06400452809919299980c19b8f00200514a2266008008002603a0046eb8c06c004dd6198071808198071808004a400090080009bae3016001300e00214a0601c002602600260160026022002601200c26464664466e24004ccc888c8cc004004010894ccc05c00440104c8c8cc014008cc010010004c06c008c064004dd6198059806998059806803240009000240004466e00004cc88c8c8cc004004008894ccc0640045200013232323232337000040026600c00c0066eb4c06c00cdd7180c801180e801180d8009919299980a99b874800800452f5bded8c02646eacc06c004c04c008c04c004c8cc00400400c894ccc060004530103d87a800013232323253330193371e00e004266e9520003301d374c00297ae0133006006003375660340066eb8c060008c070008c068004dd59980698079980698078012400490010021bae33009300b00148000dd6998049805800a40046022002601200c601200a2930b1bad00133001001480008888cccc01ccdc38008018061199980280299b8000448008c0380040080088c014dd5000918019baa0015734aae7555cf2ab9f5740ae855d101",
            "hash": "9330f75b7edd98279059a1897131a983a21ee475523700913701273f"
        },
        {
            "title": "treasury.spend_v1",
            "datum": {
                "title": "datum",
                "schema": {
                    "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                }
            },
            "redeemer": {
                "title": "redeemer",
                "schema": {
                    "$ref": "#/definitions/treasury~1TreasuryRedeemer"
                }
            },
            "compiledCode": "590df30100003232323232323232323232322223232533300a3232323232533300f3370e9000002099191929998092999809299980919b87375a602800490010a511533013490117696e707574732e317374203d3d2031203f2046616c73650014a02a66602466e1cdd6980a000a4004294454cc04d241186f7574707574732e317374203d3d2031203f2046616c73650014a0294054ccc048cdc41bad3015002375a602a002294454cc04d24120696e707574732e326e64203c206f7574707574732e326e64203f2046616c73650014a02940ccc888ccc01400d2f7b630010100000101000022533301653330163375e6602460280049000002099baf33012301400248010cdd2a40086603600697ae014a0264a66602ea66602e66e20005208092f40113375e6e98c024dd599809980a801a4004980101a00014a02a66030921375468657265206973206e6f206d696e696d616c20414441206f6e204f7574707574206f7220736f6d65207573656c65737320617373657400161337606ea0cdc01bad301900248008dd419b80375a603400400260126eaccc048c0500092002100137586601a601e6601a601e01490002400800e01866644466600800697bdb18010100000101000022533301553330153375e6602260266602260266602260260049001240009000002099baf3301130133301130130024800920043374a90021980d001a5eb80528099bb0375066e00dd6980b800a40046ea0cdc01bad30180013008375666022602666022602600490012400420026eb0cc030c038cc030c038025200048000cc030c038019200000b22232330010010042253330180011004132323300500233004004001301c002301a0011323232533301253330123253330133370e900000089919191919299980c19b87480000044c8c8cc88c8cc00400400c894ccc08800452809919299981019b8f00200514a2266008008002604c0046eb8c090004dd61980b180c1980b180c009a400090080009bae301f001301600214a0602c002603800260260026034002602201c26464664466e24004ccc020dd619809980a99809980a808240009000240004466e00004cc88c8c8cc004004008894ccc0880045200013232323232337000040026600c00c0066eb4c09000cdd71811001181300118120009919299980e99b874800800452f5bded8c02646eacc090004c06c008c06c004cc03c008004dd59980a980b9980a980b8012400490010021bae33011301300148000dd6998089809800a40046034002602201c602201a294454cc04d2413d6d6574686f642e636865636b5f7472616e73616374696f6e5f69735f76616c69646174656428636f6e746578742c20646174756d29203f2046616c73650014a02a666024a666024a66602466e25200200114a22a66026921356f757470757473203e3d20636f6e7374616e742e6d696e696d616c5f6e756d6265725f74726561737572696573203f2046616c73650014a0294454ccc048cdc38008010a511533013491196f757470757473203d3d20696e70757473203f2046616c73650014a0294454cc04d24150286f757470757473203e3d20636f6e7374616e742e6d696e696d616c5f6e756d6265725f74726561737572696573293f207c7c20286f757470757473203d3d20696e70757473293f203f2046616c73650014a02940ccc888ccc01400d200022533301653330163375e6602460280049000002099baf33012301400248010cdd2a40086603600697ae014a02a66602ca66602c66e20c024dd599809180a001240049040497a00899baf374c60106eaccc048c05000920024c0101a00014a02a6602e921375468657265206973206e6f206d696e696d616c20414441206f6e204f7574707574206f7220736f6d65207573656c6573732061737365740016133700002900108009bac3300d300f3300d300f00a48001200400700c33322233300400348000894ccc0554ccc054cdd7998089809998089809801240049000002099baf3301130133301130130024800920043374a90021980d001a5eb80528099b80001480084004dd6198061807198061807004a40009000003005911191980080080211299980c0008802099191980280119802002000980e001180d0009191980080080111299980a8008a5eb7bdb1804c8c8c8c94ccc054cdc7a4500002100313301a337606ea4008dd3000998030030019bab3017003375c602a0046032004602e0024646464a66602266e1d20020011480004c8dd6980c0009807801180780099299980819b87480080045300103d87a800013232323300100100222533301800114c103d87a800013232323253330183371e9110000213374a90001980e9ba80014bd700998030030019bad301a003375c6030004603800460340026eacc05c004c038008c038004cc0080052210022323300100100322533301400114c0103d87a800013232323253330143371e00e004266e95200033019374c00297ae01330060060033756602c0066eb8c050008c060008c058004c028014c94ccc02ccdc3a400460140022646464a66601c66e1d2000300d001132323300c300e3300c300e0014800920003015001300c001153300f49012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163322323300100100322533301500114c0103d87a80001323253330133375e6601e60220049000002899ba548000cc0600092f5c02660080080026032004602e0026eb0cc024c02ccc024c02c019200048000004c048004c02400454cc03124012a4578706563746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e0016330063008003480085261632533300a3370e90000008a99980718040020a4c2a660169211d4578706563746564206e6f206669656c647320666f7220436f6e73747200161533300a3370e90010008a99980718040020a4c2a6601692011d4578706563746564206e6f206669656c647320666f7220436f6e7374720016153300b4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163008003332232533300b3370e9000000899192999808980a00109924c64a66601c66e1d20000011323232325333016301900213232498c94ccc050cdc3a400000226464a666034603a0042649319299980b99b87480000044c8c94ccc074c0800084c9263011001153301a4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301e0013015002153330173370e90010008991919191919299981098120010a4c2a6603c9201334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a604400260440046eb4c080004c080008dd6980f000980a8010a9980c24812b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016301500115330174901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301b0013012003153330143370e90010008a99980c18090018a4c2a6602a92011d4578706563746564206e6f206669656c647320666f7220436f6e737472001615330154912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163012002300a0031533013491334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301700130170023015001300c002153300f4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300c001153300e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016301200130090021533300b3370e9001000899192999808980a00109924c64a66601c66e1d200000113232323253330163019002149854cc04d2401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375a602e002602e0046eb8c054004c03000854cc03d2412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300c001153300e4901334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206578706563746564001630120013009002153300c4912b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e7400163009001232533300a3370e900000089919299980818098010a4c2a6601a921334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602200260100042a66601466e1d20020011323253330103013002149854cc0352401334c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2065787065637465640016375c602200260100042a660169212b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016300800100333001001480008888cccc01ccdc38008018069199980280299b8000448008c03c0040080088c018dd5000918021baa0015734ae7155ceaab9e5573eae815d0aba201",
            "hash": "782cb6b3ac3c3876604785ea99ef97bc8bbb99e835709e4fd6acf7f2"
        }
    ],
    "definitions": {
        "ByteArray": {
            "dataType": "bytes"
        },
        "Data": {
            "title": "Data",
            "description": "Any Plutus data."
        },
        "Int": {
            "dataType": "integer"
        },
        "List$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
            "dataType": "list",
            "items": {
                "$ref": "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
        },
        "List$common/types/SellingMarketplaceFeePart": {
            "dataType": "list",
            "items": {
                "$ref": "#/definitions/common~1types~1SellingMarketplaceFeePart"
            }
        },
        "Option$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
            "title": "Optional",
            "anyOf": [
                {
                    "title": "Some",
                    "description": "An optional value.",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
                        }
                    ]
                },
                {
                    "title": "None",
                    "description": "Nothing.",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        },
        "Option$common/types/Royalty": {
            "title": "Optional",
            "anyOf": [
                {
                    "title": "Some",
                    "description": "An optional value.",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/common~1types~1Royalty"
                        }
                    ]
                },
                {
                    "title": "None",
                    "description": "Nothing.",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        },
        "Option$common/types/WithdrawalMethod": {
            "title": "Optional",
            "anyOf": [
                {
                    "title": "Some",
                    "description": "An optional value.",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                        }
                    ]
                },
                {
                    "title": "None",
                    "description": "Nothing.",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        },
        "aiken/transaction/OutputReference": {
            "title": "OutputReference",
            "description": "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
            "anyOf": [
                {
                    "title": "OutputReference",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "transaction_id",
                            "$ref": "#/definitions/aiken~1transaction~1TransactionId"
                        },
                        {
                            "title": "output_index",
                            "$ref": "#/definitions/Int"
                        }
                    ]
                }
            ]
        },
        "aiken/transaction/TransactionId": {
            "title": "TransactionId",
            "description": "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
            "anyOf": [
                {
                    "title": "TransactionId",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "hash",
                            "$ref": "#/definitions/ByteArray"
                        }
                    ]
                }
            ]
        },
        "aiken/transaction/credential/Address": {
            "title": "Address",
            "description": "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
            "anyOf": [
                {
                    "title": "Address",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "payment_credential",
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Credential"
                        },
                        {
                            "title": "stake_credential",
                            "$ref": "#/definitions/Option$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
                        }
                    ]
                }
            ]
        },
        "aiken/transaction/credential/Credential": {
            "title": "Credential",
            "description": "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
            "anyOf": [
                {
                    "title": "VerificationKeyCredential",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/ByteArray"
                        }
                    ]
                },
                {
                    "title": "ScriptCredential",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": [
                        {
                            "$ref": "#/definitions/ByteArray"
                        }
                    ]
                }
            ]
        },
        "aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
            "title": "Referenced",
            "description": "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
            "anyOf": [
                {
                    "title": "Inline",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Credential"
                        }
                    ]
                },
                {
                    "title": "Pointer",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": [
                        {
                            "title": "slot_number",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "transaction_index",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "certificate_index",
                            "$ref": "#/definitions/Int"
                        }
                    ]
                }
            ]
        },
        "common/types/AssetClass": {
            "title": "AssetClass",
            "anyOf": [
                {
                    "title": "AssetClass",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "policy_id",
                            "$ref": "#/definitions/ByteArray"
                        },
                        {
                            "title": "token_name",
                            "$ref": "#/definitions/ByteArray"
                        }
                    ]
                }
            ]
        },
        "common/types/InstantBuyDatum": {
            "title": "InstantBuyDatum",
            "anyOf": [
                {
                    "title": "InstantBuyDatum",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "seller_address",
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Address"
                        },
                        {
                            "title": "listing_marketplace_treasury",
                            "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                        },
                        {
                            "title": "listing_affiliate_treasury",
                            "$ref": "#/definitions/Option$common~1types~1WithdrawalMethod"
                        },
                        {
                            "title": "asset_price",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "royalty",
                            "$ref": "#/definitions/Option$common~1types~1Royalty"
                        }
                    ]
                }
            ]
        },
        "common/types/OfferDatum": {
            "title": "OfferDatum",
            "anyOf": [
                {
                    "title": "OfferDatum",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "offerer_address",
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Address"
                        },
                        {
                            "title": "listing_marketplace_treasury",
                            "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                        },
                        {
                            "title": "listing_affiliate_treasury",
                            "$ref": "#/definitions/Option$common~1types~1WithdrawalMethod"
                        },
                        {
                            "title": "offered_price",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "wanted_asset",
                            "$ref": "#/definitions/common~1types~1WantedAsset"
                        },
                        {
                            "title": "royalty",
                            "$ref": "#/definitions/Option$common~1types~1Royalty"
                        }
                    ]
                }
            ]
        },
        "common/types/Royalty": {
            "title": "Royalty",
            "anyOf": [
                {
                    "title": "Royalty",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "portion",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "treasury",
                            "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                        }
                    ]
                }
            ]
        },
        "common/types/SellingMarketplaceFeePart": {
            "title": "SellingMarketplaceFeePart",
            "anyOf": [
                {
                    "title": "SellingMarketplaceFeePart",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "portion",
                            "$ref": "#/definitions/Int"
                        },
                        {
                            "title": "treasury",
                            "$ref": "#/definitions/common~1types~1WithdrawalMethod"
                        }
                    ]
                }
            ]
        },
        "common/types/TokenValidation": {
            "title": "TokenValidation",
            "anyOf": [
                {
                    "title": "Token",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "title": "policy",
                            "$ref": "#/definitions/ByteArray"
                        },
                        {
                            "title": "count",
                            "$ref": "#/definitions/Int"
                        }
                    ]
                }
            ]
        },
        "common/types/WantedAsset": {
            "title": "WantedAsset",
            "anyOf": [
                {
                    "title": "WantedAssetSpecific",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/common~1types~1AssetClass"
                        }
                    ]
                },
                {
                    "title": "WantedAssetAny",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": [
                        {
                            "$ref": "#/definitions/ByteArray"
                        }
                    ]
                }
            ]
        },
        "common/types/WithdrawalMethod": {
            "title": "WithdrawalMethod",
            "anyOf": [
                {
                    "title": "AddressWithdrawalMethod",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/aiken~1transaction~1credential~1Address"
                        }
                    ]
                },
                {
                    "title": "TokenWithdrawalMethod",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": [
                        {
                            "$ref": "#/definitions/common~1types~1TokenValidation"
                        }
                    ]
                }
            ]
        },
        "instant_buy/InstantBuyRedeemer": {
            "title": "InstantBuyRedeemer",
            "anyOf": [
                {
                    "title": "Accept",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/List$common~1types~1SellingMarketplaceFeePart"
                        }
                    ]
                },
                {
                    "title": "Cancel",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        },
        "offer/OfferRedeemer": {
            "title": "OfferRedeemer",
            "anyOf": [
                {
                    "title": "Accept",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": [
                        {
                            "$ref": "#/definitions/List$common~1types~1SellingMarketplaceFeePart"
                        }
                    ]
                },
                {
                    "title": "Cancel",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        },
        "treasury/TreasuryRedeemer": {
            "title": "TreasuryRedeemer",
            "description": "Set of operation with Treasury",
            "anyOf": [
                {
                    "title": "Pay",
                    "dataType": "constructor",
                    "index": 0,
                    "fields": []
                },
                {
                    "title": "Withdraw",
                    "dataType": "constructor",
                    "index": 1,
                    "fields": []
                }
            ]
        }
    }
};

function version() {
    return plutus.preamble.version;
}
function getValidator(title) {
    for (const validator of plutus.validators) {
        if (validator.title == title) {
            return validator;
        }
    }
}
function getCompiledCode(title) {
    return {
        type: "PlutusV2",
        script: getValidator(title).compiledCode
    };
}
function applyCodeParamas(code, params) {
    return {
        type: "PlutusV2",
        script: lucidCardano.applyParamsToScript(code.script, params)
    };
}
function getCompiledCodeParams(title, params) {
    return applyCodeParamas(getCompiledCode(title), params);
}
function getRewardAddress(lucid, stake) {
    return lucid.utils.credentialToRewardAddress(lucid.utils.scriptHashToCredential(stake));
}
function encodeAddress(paymentPubKeyHex, stakingPubKeyHex) {
    const paymentCredential = new lucidCardano.Constr(0, [paymentPubKeyHex]);
    const stakingCredential = stakingPubKeyHex
        ? new lucidCardano.Constr(0, [new lucidCardano.Constr(0, [new lucidCardano.Constr(0, [stakingPubKeyHex])])])
        : new lucidCardano.Constr(1, []);
    return new lucidCardano.Constr(0, [paymentCredential, stakingCredential]);
}
function encodeTreasuryDatumAddress(paymentPubKeyHex, stakingPubKeyHex) {
    const address = encodeAddress(paymentPubKeyHex, stakingPubKeyHex);
    return new lucidCardano.Constr(0, [address]);
}
const encodeTreasuryDatumTokens = (currencySymbol, minTokens) => {
    return new lucidCardano.Constr(1, [new lucidCardano.Constr(0, [currencySymbol, minTokens])]);
};
function encodeRoyalty(portion) {
    return portion
        ? new lucidCardano.Constr(0, [new lucidCardano.Constr(0, [BigInt(portion.percent * 10000), lucidCardano.Data.from(portion.treasury)])])
        : new lucidCardano.Constr(1, []);
}
function encodeWantedAsset(wantedAsset) {
    return wantedAsset.assetName ?
        new lucidCardano.Constr(0, [new lucidCardano.Constr(0, [wantedAsset.policyId, wantedAsset.assetName])]) :
        new lucidCardano.Constr(1, [wantedAsset.policyId]);
}
/**
 * Mint new unique asset
 *
 * @param lucid
 * @param name
 * @param amount
 * @returns transaction hash
 */
async function mintUniqueAsset(lucid, name, amount) {
    // Transform token name to hexa
    const tokenName = lucidCardano.fromText(name);
    // Get first UTxO on wallet
    const [utxo, ...rest] = await lucid.utxosAt(await lucid.wallet.address());
    // Encode UTxO to transaction
    const param = new lucidCardano.Constr(0, [new lucidCardano.Constr(0, [utxo.txHash]), BigInt(utxo.outputIndex)]);
    // Compile code with UTxO
    const policy = getCompiledCodeParams("assets.mint_v1", [param]);
    // Hash script
    const policyId = lucid.utils.mintingPolicyToId(policy);
    // Calculate unit name
    const unit = policyId + tokenName;
    // Construct transaction
    const tx = await lucid
        .newTx()
        .collectFrom([utxo])
        .mintAssets({ [unit]: BigInt(amount) }, lucidCardano.Data.void())
        .attachMintingPolicy(policy)
        .complete();
    // Sign & Submit transaction
    const signedTx = await tx.sign().complete();
    const txHash = await signedTx.submit();
    await lucid.awaitTx(txHash);
    // Return transaction hash (awaited)
    return txHash;
}
class JamOnBreadAdminV1 {
    static numberOfStakes = 10n;
    static numberOfToken = 1n;
    static treasuryScriptTitle = "treasury.spend_v1";
    static instantBuyScriptTitle = "instant_buy.spend_v1";
    static offerScriptTitle = "offer.spend_v1";
    static minimumAdaAmount = 2000000n;
    static minimumJobFee = 100000n;
    jamTokenPolicy = "74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a";
    jamTokenName = "556e69717565";
    jamStakes;
    lucid;
    treasuryScript;
    instantBuyScript;
    offerScript;
    treasuryDatum;
    static getTreasuryScript() {
        return getCompiledCode(JamOnBreadAdminV1.treasuryScriptTitle);
    }
    static getJamStakes(lucid, policyId, amount, number) {
        const stakes = [];
        for (let i = 1n; i <= number; i++) {
            const code = getCompiledCodeParams('staking.withdrawal_v1', [encodeTreasuryDatumTokens(policyId, amount), BigInt(i)]);
            stakes.push(lucid.utils.validatorToScriptHash(code));
        }
        return stakes;
    }
    constructor(lucid, jamTokenPolicy, jamTokenName) {
        this.lucid = lucid;
        this.jamTokenPolicy = jamTokenPolicy;
        this.jamTokenName = jamTokenName;
        this.jamStakes = JamOnBreadAdminV1.getJamStakes(lucid, this.jamTokenPolicy, JamOnBreadAdminV1.numberOfToken, JamOnBreadAdminV1.numberOfStakes);
        this.treasuryScript = JamOnBreadAdminV1.getTreasuryScript();
        this.instantBuyScript = applyCodeParamas(this.getInstantBuyScript(), [
            this.lucid.utils.validatorToScriptHash(this.treasuryScript),
            Array.from(this.jamStakes.map(stakeHash => new lucidCardano.Constr(0, [new lucidCardano.Constr(1, [stakeHash])]))),
            this.createJobToken()
        ]);
        this.offerScript = applyCodeParamas(this.getOfferScript(), [
            this.lucid.utils.validatorToScriptHash(this.treasuryScript),
            Array.from(this.jamStakes.map(stakeHash => new lucidCardano.Constr(0, [new lucidCardano.Constr(1, [stakeHash])]))),
            this.createJobToken()
        ]);
        this.treasuryDatum = this.createJobToken();
    }
    createJobToken() {
        return encodeTreasuryDatumTokens(this.jamTokenPolicy, BigInt(Math.floor(Number(JamOnBreadAdminV1.numberOfToken) / 2) + 1));
    }
    async payJoBToken(tx, amount) {
        return tx.payToAddress(await this.lucid.wallet.address(), {
            [this.jamTokenPolicy + this.jamTokenName]: amount
        });
    }
    async squashNft() {
        const utxos = await this.lucid.wallet.getUtxos();
        const assets = {
            lovelace: 0n
        };
        for (let utxo of utxos) {
            for (let asset in utxo.assets) {
                if (asset in assets) {
                    assets[asset] += BigInt(utxo.assets[asset]);
                }
                else {
                    assets[asset] = BigInt(utxo.assets[asset]);
                }
            }
        }
        assets.lovelace -= 2000000n;
        const tx = await this.lucid
            .newTx()
            .collectFrom(utxos)
            .payToAddress(await this.lucid.wallet.address(), assets)
            .complete();
        const signedTx = await tx
            .sign()
            .complete();
        const txHash = await signedTx.submit();
        return {
            txHash,
            outputIndex: 0
        };
    }
    getInstantBuyScript() {
        return getCompiledCode(JamOnBreadAdminV1.instantBuyScriptTitle);
    }
    getOfferScript() {
        return getCompiledCode(JamOnBreadAdminV1.offerScriptTitle);
    }
    getTreasuryAddress(stakeId) {
        if (typeof stakeId === "undefined")
            stakeId = stakeId || Math.round(Math.random() * this.jamStakes.length);
        const paymentCredential = {
            type: "Script",
            hash: this.lucid.utils.validatorToScriptHash(this.treasuryScript)
        };
        const stakeCredential = {
            type: "Script",
            hash: this.jamStakes[stakeId]
        };
        return this.lucid.utils.credentialToAddress(paymentCredential, stakeCredential);
    }
    async getEncodedAddress() {
        const address = await this.lucid.wallet.address();
        const payCred = this.lucid.utils.paymentCredentialOf(address);
        try {
            const stakeCred = this.lucid.utils.stakeCredentialOf(address);
            return encodeAddress(payCred.hash, stakeCred.hash);
        }
        catch (e) {
            return encodeAddress(payCred.hash);
        }
    }
    getInstantBuyAddress(stakeId) {
        if (typeof stakeId === "undefined")
            stakeId = stakeId || Math.round(Math.random() * this.jamStakes.length);
        const paymentCredential = {
            type: "Script",
            hash: this.lucid.utils.validatorToScriptHash(this.instantBuyScript)
        };
        const stakeCredential = {
            type: "Script",
            hash: this.jamStakes[stakeId]
        };
        return this.lucid.utils.credentialToAddress(paymentCredential, stakeCredential);
    }
    getOfferAddress(stakeId) {
        if (typeof stakeId === "undefined")
            stakeId = stakeId || Math.round(Math.random() * this.jamStakes.length);
        const paymentCredential = {
            type: "Script",
            hash: this.lucid.utils.validatorToScriptHash(this.offerScript)
        };
        const stakeCredential = {
            type: "Script",
            hash: this.jamStakes[stakeId]
        };
        return this.lucid.utils.credentialToAddress(paymentCredential, stakeCredential);
    }
    async getTreasuries() {
        const address = this.getTreasuryAddress(0);
        return await this.lucid.utxosAt(address);
    }
    getTreasury(treasuries, datum) {
        const index = treasuries.findIndex((value) => {
            return value.datum == datum;
        });
        if (index > -1) {
            const element = treasuries[index];
            // Removed splice
            // treasuries.splice(index, 1)
            return element;
        }
        return undefined;
    }
    parseRoyalty(datum) {
        if (datum.index == 0) {
            return {
                percent: Number(datum.fields[0].fields[0]) / 10000,
                treasury: lucidCardano.Data.to(datum.fields[0].fields[1])
            };
        }
        else {
            return undefined;
        }
    }
    parseWantedAsset(datum) {
        if (datum.index == 0) {
            return {
                policyId: datum.fields[0],
                assetName: datum.fields[1]
            };
        }
        else {
            return {
                policyId: datum.fields[0],
                assetName: undefined
            };
        }
    }
    parseBeneficier(datum) {
        const beneficier_address = datum.fields[0].fields[0];
        const beneficier_stake = datum.fields[1].index == 0 ?
            datum.fields[1].fields[0].fields[0].fields[0]
            :
                undefined;
        const beneficier = this.lucid.utils.credentialToAddress(this.lucid.utils.keyHashToCredential(beneficier_address), beneficier_stake ? this.lucid.utils.keyHashToCredential(beneficier_stake) : undefined);
        return beneficier;
    }
    parseInstantbuyDatum(datumString) {
        const datum = lucidCardano.Data.from(datumString);
        const beneficier = this.parseBeneficier(datum.fields[0]);
        const listingMarketDatum = lucidCardano.Data.to(datum.fields[1]);
        const listingAffiliateDatum = datum.fields[2].index == 0 ? lucidCardano.Data.to(datum.fields[2].fields[0]) : listingMarketDatum;
        const amount = datum.fields[3];
        const royalty = this.parseRoyalty(datum.fields[4]);
        return {
            beneficier,
            listingMarketDatum,
            listingAffiliateDatum,
            amount,
            royalty
        };
    }
    parseOfferDatum(datumString) {
        const datum = lucidCardano.Data.from(datumString);
        const beneficier = this.parseBeneficier(datum.fields[0]);
        const listingMarketDatum = lucidCardano.Data.to(datum.fields[1]);
        const listingAffiliateDatum = datum.fields[2].index == 0 ? lucidCardano.Data.to(datum.fields[2].fields[0]) : listingMarketDatum;
        const amount = datum.fields[3];
        const wantedAsset = this.parseWantedAsset(datum.fields[4]);
        const royalty = this.parseRoyalty(datum.fields[5]);
        return {
            beneficier,
            listingMarketDatum,
            listingAffiliateDatum,
            amount,
            wantedAsset,
            royalty
        };
    }
    addToTreasuries(treasuries, datum, value) {
        if (datum in treasuries) {
            treasuries[datum] = treasuries[datum] + value;
        }
        else {
            treasuries[datum] = value;
        }
    }
    async payToTreasuries(tx, payToTreasuries, force) {
        // JoB treasury
        const allTreasuries = await this.getTreasuries();
        const collectFromTreasuries = {};
        for (let datum in payToTreasuries) {
            const treasury = this.getTreasury(allTreasuries, datum);
            collectFromTreasuries[datum] = treasury;
        }
        tx = tx.collectFrom(Object.values(collectFromTreasuries), lucidCardano.Data.void());
        console.debug("Pay to treasuries", payToTreasuries);
        // Pay to treasuries
        for (let datum in collectFromTreasuries) {
            const treasury = collectFromTreasuries[datum];
            tx = tx.payToContract(treasury.address, { inline: treasury.datum }, { lovelace: BigInt(treasury.assets.lovelace) + BigInt(payToTreasuries[datum]) });
        }
        tx = tx.attachSpendingValidator(this.treasuryScript);
        return tx;
    }
    async instantBuyListTx(tx, unit, price, listing, affiliate, royalty) {
        if (typeof listing == "undefined") {
            listing = lucidCardano.Data.to(this.treasuryDatum);
        }
        const sellerAddr = await this.getEncodedAddress();
        const datum = new lucidCardano.Constr(0, [
            sellerAddr,
            lucidCardano.Data.from(listing),
            affiliate ? new lucidCardano.Constr(0, [lucidCardano.Data.from(affiliate)]) : new lucidCardano.Constr(1, []),
            price,
            encodeRoyalty(royalty)
        ]);
        tx = tx.payToContract(this.getInstantBuyAddress(), { inline: lucidCardano.Data.to(datum) }, {
            [unit]: BigInt(1),
            lovelace: JamOnBreadAdminV1.minimumAdaAmount
        });
        return tx;
    }
    async instantbuyList(unit, price, listing, affiliate, royalty) {
        let txList = this.lucid.newTx();
        txList = await this.instantBuyListTx(txList, unit, price, listing, affiliate, royalty);
        return await this.finishTx(txList);
    }
    async instantBuyCancelTx(tx, utxo) {
        const toSpend = await this.lucid.utxosByOutRef([utxo]);
        tx = tx
            .collectFrom(toSpend, lucidCardano.Data.to(new lucidCardano.Constr(1, [])))
            .attachSpendingValidator(this.instantBuyScript)
            .addSigner(await this.lucid.wallet.address());
        return tx;
    }
    async instantBuyCancel(utxo) {
        let txCancel = this.lucid.newTx();
        txCancel = await this.instantBuyCancelTx(txCancel, utxo);
        return await this.finishTx(txCancel);
    }
    async instantBuyUpdateTx(tx, unit, price, listing, affiliate, royalty) {
        const toSpend = await this.lucid.utxoByUnit(unit);
        tx = await this.instantBuyCancelTx(tx, {
            txHash: toSpend.txHash,
            outputIndex: toSpend.outputIndex
        });
        tx = await this.instantBuyListTx(tx, unit, price, listing, affiliate, royalty);
        return tx;
    }
    async instantBuyUpdate(unit, price, listing, affiliate, royalty) {
        let txUpdate = this.lucid.newTx();
        txUpdate = await this.instantBuyUpdateTx(txUpdate, unit, price, listing, affiliate, royalty);
        return await this.finishTx(txUpdate);
    }
    async instantBuyProceed(utxo, force = false, ...sellMarketPortions) {
        const [collectUtxo] = await this.lucid.utxosByOutRef([
            utxo
        ]);
        const params = this.parseInstantbuyDatum(collectUtxo.datum);
        const provision = 0.025 * Number(params.amount);
        console.debug("Instant buy", params);
        const payToTreasuries = {
            [lucidCardano.Data.to(this.treasuryDatum)]: BigInt(Math.max(Math.ceil(provision * 0.1), Number(JamOnBreadAdminV1.minimumJobFee)))
        };
        this.addToTreasuries(payToTreasuries, params.listingMarketDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        this.addToTreasuries(payToTreasuries, params.listingAffiliateDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        for (let portion of sellMarketPortions) {
            this.addToTreasuries(payToTreasuries, portion.treasury, BigInt(Math.ceil(Number(provision) * 0.5 * portion.percent)));
        }
        if (params.royalty) {
            this.addToTreasuries(payToTreasuries, params.royalty.treasury, BigInt(Math.ceil(Number(params.amount) * params.royalty.percent)));
        }
        const buyRedeemer = lucidCardano.Data.to(new lucidCardano.Constr(0, [
            sellMarketPortions.map(portion => new lucidCardano.Constr(0, [
                BigInt(Math.ceil(portion.percent * 10000)),
                lucidCardano.Data.from(portion.treasury)
            ]))
        ]));
        let buildTx = this.lucid
            .newTx()
            // TODO: To test big portion of assets
            //.collectFrom(await this.lucid.wallet.getUtxos()) 
            .collectFrom([
            collectUtxo
        ], buyRedeemer)
            .attachSpendingValidator(this.instantBuyScript);
        buildTx = buildTx.payToAddress(params.beneficier, { lovelace: params.amount + collectUtxo.assets.lovelace });
        buildTx = await this.payToTreasuries(buildTx, payToTreasuries, false);
        return await this.finishTx(buildTx);
    }
    async offerListTx(tx, asset, price, listing, affiliate, royalty) {
        if (typeof listing == "undefined") {
            listing = lucidCardano.Data.to(this.treasuryDatum);
        }
        const offererAddr = await this.getEncodedAddress();
        const datum = new lucidCardano.Constr(0, [
            offererAddr,
            lucidCardano.Data.from(listing),
            affiliate ? new lucidCardano.Constr(0, [lucidCardano.Data.from(affiliate)]) : new lucidCardano.Constr(1, []),
            price,
            encodeWantedAsset(asset),
            encodeRoyalty(royalty)
        ]);
        tx = tx.payToContract(this.getOfferAddress(), { inline: lucidCardano.Data.to(datum) }, {
            lovelace: JamOnBreadAdminV1.minimumAdaAmount + price
        });
        return tx;
    }
    async offerList(asset, price, listing, affiliate, royalty) {
        let txList = this.lucid.newTx();
        txList = await this.offerListTx(txList, asset, price, listing, affiliate, royalty);
        return {
            txHash: await this.finishTx(txList),
            outputIndex: 0
        };
    }
    async offerCancelTx(tx, utxo) {
        const toSpend = await this.lucid.utxosByOutRef([utxo]);
        tx = tx
            .collectFrom(toSpend, lucidCardano.Data.to(new lucidCardano.Constr(1, [])))
            .attachSpendingValidator(this.offerScript)
            .addSigner(await this.lucid.wallet.address());
        return tx;
    }
    async offerCancel(utxo) {
        let txCancel = this.lucid.newTx();
        txCancel = await this.offerCancelTx(txCancel, utxo);
        return await this.finishTx(txCancel);
    }
    async offerUpdateTx(tx, utxo, asset, price, listing, affiliate, royalty) {
        tx = await this.offerCancelTx(tx, utxo);
        tx = await this.offerListTx(tx, asset, price, listing, affiliate, royalty);
        return tx;
    }
    async offerUpdate(utxo, asset, price, listing, affiliate, royalty) {
        let txUpdate = this.lucid.newTx();
        txUpdate = await this.offerUpdateTx(txUpdate, utxo, asset, price, listing, affiliate, royalty);
        return await this.finishTx(txUpdate);
    }
    async offerProceed(utxo, unit, force = false, ...sellMarketPortions) {
        const [collectUtxo] = await this.lucid.utxosByOutRef([
            utxo
        ]);
        const params = this.parseOfferDatum(collectUtxo.datum);
        const provision = 0.025 * Number(params.amount);
        console.debug("Offer", params);
        const payToTreasuries = {
            [lucidCardano.Data.to(this.treasuryDatum)]: BigInt(Math.max(Math.ceil(provision * 0.1), Number(JamOnBreadAdminV1.minimumJobFee)))
        };
        this.addToTreasuries(payToTreasuries, params.listingMarketDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        this.addToTreasuries(payToTreasuries, params.listingAffiliateDatum, BigInt(Math.ceil(Number(provision) * 0.2)));
        for (let portion of sellMarketPortions) {
            this.addToTreasuries(payToTreasuries, portion.treasury, BigInt(Math.ceil(Number(provision) * 0.5 * portion.percent)));
        }
        if (params.royalty) {
            this.addToTreasuries(payToTreasuries, params.royalty.treasury, BigInt(Math.ceil(Number(params.amount) * params.royalty.percent)));
        }
        const buyRedeemer = lucidCardano.Data.to(new lucidCardano.Constr(0, [
            sellMarketPortions.map(portion => new lucidCardano.Constr(0, [
                BigInt(Math.ceil(portion.percent * 10000)),
                lucidCardano.Data.from(portion.treasury)
            ]))
        ]));
        let buildTx = this.lucid
            .newTx()
            // TODO: To test big portion of assets
            //.collectFrom(await this.lucid.wallet.getUtxos()) 
            .collectFrom([
            collectUtxo
        ], buyRedeemer)
            .attachSpendingValidator(this.offerScript);
        buildTx = buildTx.payToAddress(params.beneficier, {
            lovelace: JamOnBreadAdminV1.minimumAdaAmount,
            [unit]: 1n
        });
        buildTx = await this.payToTreasuries(buildTx, payToTreasuries, false);
        return await this.finishTx(buildTx);
    }
    async finishTx(tx) {
        const txComplete = await tx.complete();
        const signedTx = await txComplete.sign().complete();
        const txHash = await signedTx.submit();
        return txHash;
    }
}
/*

const privKey = "ed25519_sk1z5zd4ap8nyyvlh2uz5rt08xh76yjhs0v7yv58vh00z399m3vrppqfhxv0n" // Treaury
//const privKey = "ed25519_sk1vmcvrrew9ppggulj08e9lg5w333t58qy2pmylprz4lg2ka0887kqz5zurk" // Test
const lucid = await Lucid.new(
    new Blockfrost("https://cardano-preprod.blockfrost.io/api/v0", "preprodVm9mYgzOYXlfFrFYfgJ2Glz7AlnMjvV9"),
    "Preprod",
)
lucid.selectWalletFromPrivateKey(privKey)



const job = new JamOnBreadAdminV1(lucid, "74ce41370dd9103615c8399c51f47ecee980467ecbfcfbec5b59d09a", "556e69717565")
const asset = {
    policyId: "b1ecd813e9084e3592d0986c41b63197fe2eb8e8994c4269933f8363",
    assetName: "4a6f42566572696669636174696f6e"
} as WantedAsset
const unit = asset.policyId + asset.assetName

// console.log(await job.getTreasuries())
// console.log(await job.squashNft())
console.log(await lucid.wallet.address())

const portions = [
    {
        percent: 0.2,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vz6r5aetvn6m6y8lax7zlx9dl7hnfm53q4njwzdcyzqmzdct4jjws").hash
        ))
    },
    {
        percent: 0.2,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vz695rlavrxv8wm2r7ur6skp5f3gtkx3xsqk20gpvest92qd42p39").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vr0yzzjnsnxpkf48n56s5jp06df2tx4dylch7j2zwm0tnrcwrmc4c").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vqrmaa655rtcxu5lg9nd7tph6wxzq5su646nmweuh798ayqa4z4hc").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vplh9cjn8vhmzn7qs8ynv7aea3t567a9w4lagetrf896q3q0xamca").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vr6v0wmlzs8xashkqdpm9k47l0q9aek0mucef273ky2xuhcfwqj92").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vqxzql8rxfxefdzjz9t6rdnly0lrffcngk9wy29c6l6j7sss5m2p6").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vr49pv7cpft4fekwg7atl4lv7fc839u72fkc9v39e0x3svcmytec9").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vqcg5dsaz9kq8n7nj8kpkr8yvpst3me4qzpzpcwkh8sexhc7n5pm7").hash
        ))
    },
    {
        percent: 0.1,
        treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vrhvvu6kn96f05ucldwlmdg46djdrerrat4qqc28xaj44kcz8j4sd").hash
        ))
    }]

/*
console.log(
    await job.instantbuyList(
        unit,
        10_000_000n,
        Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vp54hwj38ykwyvek6vdkug6flwrdtwuazqlwuqngzw5deks388fd7").hash
        )),
        Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vry4ww84sje8lmvw35glqgkdt6ahzdz04x8yqkfmpt5t3xcrve047").hash
        )),
        {percent: 0.1, treasury: Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vrelgt8camtmzktcykamyh8rgpq5sutueeawpzwykwpdujq05epfh").hash
        ))} as Portion
    )
)
*/
/*
console.log(await job.instantBuyCancel({
    txHash: "db0f647a8e3685da088a0003b249fc658e14cde6a8a1ab39cec06935317d9c90",
    outputIndex: 0
}))
*/
/*
console.log(await job.instantBuyProceed(
    {
        txHash: "0db4ecea71e76926635b84870d363b557599abf73e69d1d82c9045f5cc8ea760",
        outputIndex: 0
    },
    false,
    ...portions.slice(0, 5)
))
*/
/*
console.log(
    await job.offerList(
        asset,
        10_000_000n,
        Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vp54hwj38ykwyvek6vdkug6flwrdtwuazqlwuqngzw5deks388fd7").hash
        )),
        Data.to(encodeTreasuryDatumAddress(
            lucid.utils.paymentCredentialOf("addr_test1vry4ww84sje8lmvw35glqgkdt6ahzdz04x8yqkfmpt5t3xcrve047").hash
        )),
        {
            percent: 0.1, treasury: Data.to(encodeTreasuryDatumAddress(
                lucid.utils.paymentCredentialOf("addr_test1vrelgt8camtmzktcykamyh8rgpq5sutueeawpzwykwpdujq05epfh").hash
            ))
        } as Portion
    )
)
*/
/*
console.log(await job.offerCancel({
    txHash: "903ae426984c49586be01132f8c5ed0e7db3363f74c4e1820c32d396a8c621ea",
    outputIndex: 0
}))
*/
/*
console.log(await job.offerProceed(
    {
        txHash: "ef0aa11cbfa22359623fbdaee32464513c82313dcd3b57130a92821ed0d060c7",
        outputIndex: 0
    },
    unit,
    false,
    ...portions.slice(0, 5)
))
*/
// console.log(job.getTreasuryAddress(0))

exports.JamOnBreadAdminV1 = JamOnBreadAdminV1;
exports.applyCodeParamas = applyCodeParamas;
exports.encodeAddress = encodeAddress;
exports.encodeRoyalty = encodeRoyalty;
exports.encodeTreasuryDatumAddress = encodeTreasuryDatumAddress;
exports.encodeTreasuryDatumTokens = encodeTreasuryDatumTokens;
exports.encodeWantedAsset = encodeWantedAsset;
exports.getCompiledCode = getCompiledCode;
exports.getCompiledCodeParams = getCompiledCodeParams;
exports.getRewardAddress = getRewardAddress;
exports.getValidator = getValidator;
exports.mintUniqueAsset = mintUniqueAsset;
exports.version = version;
//# sourceMappingURL=contract-lib.cjs.js.map
